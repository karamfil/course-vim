{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"CheatSheet/","title":"CheatSheet","text":"","tags":["vim","learning"]},{"location":"CheatSheet/#modes","title":"Modes","text":"<ul> <li><code>Esc</code>: Enter Normal Mode.</li> </ul>","tags":["vim","learning"]},{"location":"CheatSheet/#undoredo","title":"Undo/Redo","text":"<ul> <li><code>u</code>: undo</li> <li><code>C-r</code>: redo</li> </ul>","tags":["vim","learning"]},{"location":"CheatSheet/#insert-mode","title":"Insert Mode:","text":"<ul> <li><code>i</code>, <code>I</code>: insert</li> <li><code>a</code>, <code>A</code>: append</li> <li><code>o</code>, <code>O</code>: open line</li> </ul>","tags":["vim","learning"]},{"location":"CheatSheet/#word-motions","title":"Word Motions:","text":"<ul> <li><code>w</code>, <code>W</code>: word (with/without punctuation).</li> <li><code>b</code>, <code>B</code>: back word (with/without punctuation).</li> <li><code>e</code>, <code>E</code>: end of word (with/without punctuation).</li> <li><code>ge</code>, <code>gE</code>: end of previous word (with/without punctuation).</li> </ul>","tags":["vim","learning"]},{"location":"CheatSheet/#operators","title":"Operators:","text":"<ul> <li><code>c</code>: change</li> <li><code>C</code>: Change to end of line</li> <li><code>cc</code>: change line</li> <li><code>d</code>: delete</li> <li><code>D</code>: Delete to end of line</li> <li><code>dd</code>: delete line</li> </ul>","tags":["vim","learning"]},{"location":"CheatSheet/#text-objects","title":"Text Objects","text":"<p>General Syntax: <code>[operator][a/i][text object]</code> - <code>a</code> : a/around - <code>i</code> : inner/inside.</p> <p>Text Objects: - <code>p</code>, <code>w</code>, <code>s</code> : paragraph, word, sentence. - <code>[</code>, <code>(</code>, <code>{</code>, <code>&lt;</code> : Blocks. - <code>'</code>, <code>\"</code>, <code>`</code> : Quoted strings. - <code>b</code>, <code>B</code> : Blocks by type. - <code>t</code> : &lt;tag&gt; blocks.</p>","tags":["vim","learning"]},{"location":"CheatSheet/#find-and-tillto-commands","title":"Find and Till/To Commands:","text":"<ul> <li><code>f&lt;char&gt;</code>: Find next <code>&lt;char&gt;</code>.</li> <li><code>F&lt;char&gt;</code>: Find previous <code>&lt;char&gt;</code>.</li> <li><code>t&lt;char&gt;</code>: To/Till next <code>&lt;char&gt;</code>.</li> <li><code>T&lt;char&gt;</code>: To/Till previous <code>&lt;char&gt;</code>.</li> <li><code>;</code>: Repeat the last <code>f</code>, <code>F</code>, <code>t</code>, or <code>T</code> motion in the same direction.</li> <li><code>,</code>: Repeat the last <code>f</code>, <code>F</code>, <code>t</code>, or <code>T</code> motion in the opposite direction.</li> </ul>","tags":["vim","learning"]},{"location":"CheatSheet/#repeats","title":"Repeats:","text":"<ul> <li><code>.</code>: Repeat the last change command</li> <li><code>[number][command]</code> : repeat command number of times</li> </ul>","tags":["vim","learning"]},{"location":"CheatSheet/#mapping-commands","title":"Mapping Commands","text":"Mode Normal Insert Command Visual Selection Operator Terminal Language map yes - - yes yes yes - - <code>n</code>map yes - - - - - - - <code></code>map! - yes yes - - - - - <code>i</code>map - yes - - - - - - <code>c</code>map - - yes - - - - - <code>v</code>map - - - yes yes - - - <code>x</code>map - - - yes - - - - <code>s</code>map - - - - yes - - - <code>o</code>map - - - - - yes - - <code>t</code>map - - - - - - yes - <code>l</code>map - yes yes - - - - yes","tags":["vim","learning"]},{"location":"Weekly%20Tutorials/Curriculum/","title":"Curriculum","text":"","tags":["vim","teaching","learning"]},{"location":"Weekly%20Tutorials/Curriculum/#links","title":"Links","text":"<p>Learning Vim https://engineeringfordatascience.com/posts/what_is_the_best_way_to_learn_vim/ https://danielmiessler.com/p/vim/ https://www.linuxfoundation.org/blog/blog/classic-sysadmin-vim-101-a-beginners-guide-to-vim</p>","tags":["vim","teaching","learning"]},{"location":"Weekly%20Tutorials/Curriculum/#ideas","title":"Ideas","text":"<ul> <li> Create a roadmap.sh</li> <li> Create a cheatsheet and improve it each week</li> <li> Come up with mnemonics for everything </li> <li> Come up with practical examples </li> <li> Come up with exercises after each week</li> <li> Make sure exercises are styled the same way</li> <li> Work on Further reading</li> <li> ?? Add prev and next links on top and bottom ??</li> </ul>","tags":["vim","teaching","learning"]},{"location":"Weekly%20Tutorials/Curriculum/#weeks","title":"Weeks","text":"<ul> <li>Week 00 Introduction</li> <li>Week 01 Normal Mode, Insert Mode and Basic Word Motions</li> <li>Week 02 Basic Operators and the Dot Command</li> <li>Week 03 Repeat Count</li> <li>Week 04 Text Object</li> <li>Week 05 Find and Till</li> <li>Week 06 Basic Clipboard</li> <li>Week 07 Quick Find</li> <li>Week 08 Navigation Line</li> <li>Week 09 Navigation FIle</li> <li>Week 10 Visual and Selection Modes</li> <li>Week 11 Navigation Screen</li> <li>Week 12 Navigation Code: % {} ]m})&gt;</li> <li>Week 13 Text Object Motions <code>(</code> <code>)</code> <code>{</code> <code>}</code> <code>]]</code> <code>][</code> <code>[[</code> <code>[]</code></li> <li>Week 14 Neovim Config and Lazy Plugin Manager</li> <li>Week 14.1 Plugin Mini Surround</li> <li>[[Week 14 Plugin - Mini Surround]]</li> <li>[[Week 15 Macros]]</li> <li>[[Week 16 Plugin - Easy Motion]]</li> <li>[[Week 17 Registers]]</li> <li>[[Week 18 Insert Mode Commands]]</li> <li>[[Week 19 Marks]]</li> <li>[[Week 20 Jumps and Changes]]: C-o C-i &lt;Tab&gt; g; g,</li> <li>Week 21 Command/Ex Mode</li> <li>[[Week 22 Search and Substitute]]</li> </ul>","tags":["vim","teaching","learning"]},{"location":"Weekly%20Tutorials/Curriculum/#ideas_1","title":"Ideas","text":"<ul> <li>Week 00 Plugin - Repeat Motion (Repmo)</li> <li>Week 00 Plugin - Mini AI</li> <li>Week 00 Plugin - Indent Object</li> <li> <p>Week 00 Advanced Undo/Redo</p> </li> <li> <p>Week 00 Indenting: &lt;=&gt;</p> </li> <li>Week 00 Change Case</li> <li>Week 00 Counters: C-A, C-X</li> <li>Week 00 Joining: J gJ</li> <li>Week 00 Replacing: r R</li> <li>Week 00 Scrolling: C-b C-f, C-d C-u, C-e C-y</li> <li>Week 00 Folds</li> <li>Week 00 Config/Plugin Commenting: gc</li> <li>Week 00 Plugin - Vim Repeat</li> <li>Week 00 Plugin - Cutlass</li> <li>Week 00 Plugin - HardTime</li> <li>Week 00 Plugin - Subversive</li> </ul>","tags":["vim","teaching","learning"]},{"location":"Weekly%20Tutorials/Curriculum/#terminal-vim-no-vscode-anymore","title":"Terminal Vim (no VSCode anymore)","text":"<ul> <li>Week 00 Window, Tabs and Buffers</li> <li>Week 00 Advanced Operators and Motions: Introduce motions like /pattern</li> </ul>","tags":["vim","teaching","learning"]},{"location":"Weekly%20Tutorials/Week%2000%20Introduction/","title":"Week 00 Introduction","text":"","tags":["vim","teaching","learning"]},{"location":"Weekly%20Tutorials/Week%2000%20Introduction/#why-creating-this","title":"Why creating this?","text":"<p>Having used Vim-like keybindings for years in tools like Sublime Text and VSCode, I keep falling in love with its power. I\u2019ve created this course to expand, strengthen and deepen my own understanding of Vim. At some point I decided to share this course and designed it to refine those skills and help you on the same journey.</p> <p>I like vscode it is great and powerful IDE and for now want to stay in, and use the best of both worlds.</p> <p>Another reason is, I was not able to find a good tutorial, course or book that covers it for people who do not have the time to directly jump and engulf them fully in vim shroud dropping the productivity tenfold. So I want this to be a slow, smooth and steady transition keeping you on the edge of the comfort zone.</p> <p>This will make your transition to terminal vim easier should you choose to take this path later.</p>","tags":["vim","teaching","learning"]},{"location":"Weekly%20Tutorials/Week%2000%20Introduction/#program","title":"Program","text":"<p>We will start with some of the basics to get a good foundation, then move on the some of the things i found most useful to everyday work, some plugins to greatly improve the usability and then we will proceed more advanced, less used or obscure topics.</p>","tags":["vim","teaching","learning"]},{"location":"Weekly%20Tutorials/Week%2000%20Introduction/#requirements","title":"Requirements","text":"<p>This course assumes you already know and use VSCode. We\u2019ll leverage its Neovim integration initially to transition seamlessly into a more Vim-centric workflow.</p>","tags":["vim","teaching","learning"]},{"location":"Weekly%20Tutorials/Week%2000%20Introduction/#what-is-neovim","title":"What is (Neo)Vim","text":"<p>im is a modal text editor, which means it uses different modes for editing, navigating, and interacting with text. Neovim, a modern fork of Vim, enhances this experience with improved features, extensibility, and support for Lua scripting.</p> <ul> <li>Read more about Neovim</li> </ul>","tags":["vim","teaching","learning"]},{"location":"Weekly%20Tutorials/Week%2000%20Introduction/#modes","title":"Modes","text":"<p>Vim operates in different modes, each designed for specific tasks:</p> Mode Description Normal Mode Default mode. Navigate and perform text manipulation commands without typing. Insert Mode Type and insert text like in regular editors. Visual Mode Select text for manipulation or editing. Command-line Mode Execute commands like saving, searching, or quitting (<code>:</code>). Replace Mode Overwrite text as you type. <p>Switching between these modes might feel strange at first, but it\u2019s key to Vim\u2019s efficiency. The separation of navigation and editing minimizes the need for hand movement.</p> <ul> <li>Read more about Vim modes</li> </ul>","tags":["vim","teaching","learning"]},{"location":"Weekly%20Tutorials/Week%2000%20Introduction/#why-learn-vim","title":"Why learn Vim?","text":"<ul> <li>Increased Speed and Efficiency: Once you master Vim, you can perform complex edits and navigate codebases faster than in traditional editors or IDEs.</li> <li>Keyboard-Centric Workflow: Vim minimizes reliance on the mouse, keeping your hands on the keyboard and improving focus.</li> <li>Universal Availability: Vim is installed by default on most UNIX systems and can be used in remote development environments.</li> <li>Customizability: Vim\u2019s flexibility allows you to tailor your editor to suit your exact needs.</li> <li>Endless Growth: Learning Vim is a lifelong skill. As you master the basics, you can continually discover more advanced techniques and workflows.</li> </ul>","tags":["vim","teaching","learning"]},{"location":"Weekly%20Tutorials/Week%2000%20Introduction/#vim-is-not-hard-it-is-intuitive","title":"Vim is not hard - it is intuitive","text":"<p>At first glance, Vim might seem complicated - \"so many keys to remember\". You may have heard jokes about people getting \u201cstuck\u201d in Vim or struggling to quit the editor. However, these stories come from misunderstanding how Vim works.</p> <p>Vim\u2019s design is logical and mnemonic: - Most commands reflect their purpose: <code>d</code> stands for \"delete\", <code>c</code> for \"change\", and so on. - Text objects and motions (like <code>ciw</code> to \"change inner word\") are intuitive once you understand the language.</p> <p>Think of Vim as learning a new language: - Initially, you might struggle to express yourself. - With practice, you\u2019ll build fluency and start thinking in Vim commands naturally.</p> <p>Patience and consistent practice will help you overcome the learning curve.</p>","tags":["vim","teaching","learning"]},{"location":"Weekly%20Tutorials/Week%2000%20Introduction/#how-we-are-going-to-learn","title":"How we are going to learn?","text":"<p>I am a strong believer that the best way to learn anything is by consistent practicing. </p> <p>Here we will: - Introduce small, manageable topics per weekly basis. - Build upon what\u2019s comfortable (vscode) and expand into new concepts, the idea is to not overwhelm our brain with a ton of new things we will forget tomorrow, but rather retain the knowledge - Stay productive while learning, ensuring you understand the what, why, and how of everything we will do.</p> <p>Each week will include: - Goals: Clear objectives for what you\u2019ll learn. - Lesson: Material we will learn for the week. - CheatSheet: We will be building our own cheatsheet - Practice: Practical tasks to apply new skills and solutions with explanations. - Further Reading: Resources to expand and deepen your understanding.</p> <p>We\u2019ll start with a clean factory Neovim configuration in VSCode. Later, we\u2019ll gradually introduce customizations and plugins to help you create a personalized, efficient editing environment.</p>","tags":["vim","teaching","learning"]},{"location":"Weekly%20Tutorials/Week%2000%20Introduction/#pro-tip-stay-consistent","title":"Pro Tip: Stay Consistent","text":"<ul> <li>Use sticky notes or a whiteboard to remind yourself of weekly goals, cheatsheet and what you are currently learning. I keep about 5 stickies on my monitor each for 1 week.</li> <li>Focus on practicing the current material until it feels natural - this way you will build muscle memory and become efficient</li> </ul>","tags":["vim","teaching","learning"]},{"location":"Weekly%20Tutorials/Week%2000%20Introduction/#setup","title":"Setup","text":"<p>To get started, follow these step:</p> <ol> <li> <p>Set up Neovim:</p> <ul> <li>Visit Neovim Installation Guide to install Neovim for your operating system.</li> <li>Open a terminal and type <code>nvim</code>. If it launches, your setup is correct.</li> <li>type <code>:q!</code> to exit \ud83e\udd23</li> </ul> </li> <li> <p>Set up VSCode-Neovim:</p> <ul> <li>Open VSCode, go to the Extensions Marketplace, and install the VSCode-Neovim extension.</li> <li>In VSCode settings (<code>Ctrl+,</code> or <code>Cmd+,</code>), search for \"Neovim Path.\"</li> <li>Enter the path to the Neovim executable (e.g., <code>/usr/bin/nvim</code> or <code>C:\\Program Files\\Neovim\\bin\\nvim.exe</code>).<ul> <li>you can find this by typing <code>which nvim</code> in the terminal</li> <li>Open any file in VSCode and verify that Neovim keybindings work as expected.<ul> <li>ex: press <code>j</code> a few times the cursor should move down</li> </ul> </li> <li>If you press <code>i</code> you will enter insert mode and you can mostly use VSCode as without the neovim extension, navigating with arrow keys, typing, etc.</li> <li>If you press esc you will go back to normal mode</li> </ul> </li> </ul> </li> </ol>","tags":["vim","teaching","learning"]},{"location":"Weekly%20Tutorials/Week%2000%20Introduction/#further-reading","title":"Further Reading","text":"","tags":["vim","teaching","learning"]},{"location":"Weekly%20Tutorials/Week%2000%20Introduction/#online-resources","title":"Online Resources","text":"<ul> <li>Vim Help \u2013 Official Vim documentation.</li> <li>Neovim Documentation</li> </ul>","tags":["vim","teaching","learning"]},{"location":"Weekly%20Tutorials/Week%2000%20Introduction/#cheat-sheets","title":"Cheat Sheets","text":"<ul> <li>Vim Cheat Sheet by Roger Petris</li> <li>Vim Cheat Sheet by Devhints\u2013</li> </ul>","tags":["vim","teaching","learning"]},{"location":"Weekly%20Tutorials/Week%2000%20Introduction/#books","title":"Books","text":"<ul> <li>Practical Vim: Edit Text at the Speed of Thought by Drew Neil.</li> <li>Modern Vim by Drew Neil.</li> </ul>","tags":["vim","teaching","learning"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/","title":"Week 01 Normal Mode, Insert Mode and Basic Word Motions","text":"","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#goals","title":"Goals","text":"<p>By the end of this week, you should:</p> <ul> <li>Understand the status bar\u2019s role in indicating the current Vim mode.</li> <li>Understand the concept of Normal Mode and how it differs from Insert/Editing Mode.</li> <li>Learn how to switch between these modes using specific keys.</li> <li>Know the basic word motions for navigating text efficiently.</li> <li>Build confidence in using Normal Mode for text navigation and Insert Mode for text entry.</li> <li>Use simple undo command</li> </ul>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#lesson","title":"Lesson","text":"","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#modes-overview","title":"Modes Overview","text":"<p>Normal Mode: This is Vim\u2019s default mode. When you first open a file in Vim or Neovim, you start in Normal Mode. In this mode, you navigate, delete, copy, and modify text without typing any new content. Think of Normal Mode as your command center - here, you give instructions to Vim on what to do with the text. For example, you can delete words, copy lines, or move quickly across the document using motions. To enter Normal Mode, you press <code>Esc</code>.</p> <p>Insert Mode: This mode is used for typing and inserting new text, similar to traditional editors. You enter Insert Mode using one of several keys (<code>i</code>, <code>I</code>, <code>a</code>, <code>A</code>, <code>o</code>, <code>O</code>), each offering a slightly different way to start inserting text relative to the current cursor position. Once you\u2019re done typing, press <code>Esc</code> to return to Normal Mode. Unlike Normal Mode, where you give commands, Insert Mode focuses entirely on content creation.</p>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#important-note","title":"\u26a0\ufe0f Important Note","text":"<p>While it's essential for text entry, it's equally important to view insertions as discrete actions. After completing a specific insertion, returning to Normal Mode by pressing <code>Esc</code> is a best practice.</p>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#why-return-to-normal-mode","title":"Why Return to Normal Mode?","text":"<ul> <li>Efficient Navigation and Editing: Normal Mode offers powerful commands for navigation and text manipulation that aren't available in Insert Mode. By returning to Normal Mode, you can swiftly move through the document and perform edits without unnecessary keystrokes.</li> <li>Command Repetition: Vim's <code>.</code> command repeats the last change made in Normal Mode. By exiting Insert Mode after each insertion, you enable the use of this feature, enhancing efficiency when applying the same change multiple times. (we will learn about this in the future)</li> <li>Mode Awareness: Consistently returning to Normal Mode reinforces the habit of mode awareness, a fundamental aspect of Vim's modal editing philosophy. This practice reduces errors and increases editing speed.</li> <li>Undo/Redo: by making discrete/atomic changes you can better utilize the sophisticated Vim's undo and redo functionality</li> </ul>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#best-practices-for-insert-mode","title":"Best Practices for Insert Mode:","text":"<ul> <li>Group Insertions: Complete a logical chunk of text, then press <code>Esc</code> to return to Normal Mode. This approach keeps insertions organized and allows for immediate navigation or command execution.</li> <li>Avoid Staying in Insert Mode: Remaining in Insert Mode after finishing an insertion can lead to inefficiencies and potential errors. Normal Mode is designed for navigation and command execution, so utilize it accordingly.</li> </ul> <p>By treating insertions as distinct actions and habitually returning to Normal Mode, you align with Vim's design principles, leading to a more efficient and error-free editing experience.</p> <p>Basically, insert mode is the almost the same as standard editing you are used to. So this will probably be the hardest lesson as it requires a complete mental change from how you are used to edit files to constantly keep going back to normal mode (from any other mode, not just insert).</p> <p>You can always disable the vscode-neovim extention if it gets too much.</p>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#keys-and-usage","title":"Keys and Usage","text":"","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#status-bar","title":"Status Bar","text":"<p>The status bar at the bottom should show useful information as well as the current working mode</p> <p></p>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#cursor","title":"Cursor","text":"<p>Usually the cursor in Vim is displayed as a block highlighting a whole character </p> <p></p>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#switching-to-normal","title":"Switching to Normal","text":"<ul> <li><code>Esc</code>: Return to Normal Mode from any other mode.</li> </ul>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#arrow-motions","title":"Arrow Motions","text":"","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#the-hjkl-and-arrow-keys","title":"The <code>hjkl</code> and Arrow Keys","text":"<p>The <code>hjkl</code> keys are used to move the cursor in Normal Mode: - <code>h</code>: Move left (\u2190) - <code>j</code>: Move down (\u2193) - <code>k</code>: Move up (\u2191) - <code>l</code>: Move right (\u2192)</p> <p>The arrow keys (<code>\u2190</code>, <code>\u2193</code>, <code>\u2191</code>, <code>\u2192</code>) can also be used for navigation in Vim. While they may feel familiar to new users, they are considered less efficient for experienced Vim users.</p>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#why-hjkl-is-preferred","title":"Why <code>hjkl</code> is Preferred?","text":"<ul> <li>Home Row Efficiency: These keys are positioned on the home row of the keyboard, meaning your fingers never have to leave their resting position. This allows for faster navigation compared to moving your hands to the arrow keys.</li> <li>Integrated with Vim Motions:  The hjkl keys integrate seamlessly with Vim's operators and motions. This synergy is harder to achieve with arrow keys.</li> <li>Consistent Across Systems: The hjkl keys work in any Vim or Neovim environment, even those without functional arrow keys (e.g., some terminal setups).</li> <li>Faster Editing: By staying on the home row, you reduce hand movement, making navigation faster and minimizing strain during long editing sessions.</li> </ul>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#why-avoid-arrow-keys","title":"Why Avoid Arrow Keys?","text":"<ol> <li>Hand Movement: Using arrow keys requires lifting your fingers off the home row, which disrupts typing flow and slows down navigation.</li> <li>Discourages Vim Philosophy: Relying on arrow keys prevents you from embracing Vim\u2019s modal editing philosophy and the efficiency offered by combining motions with commands.</li> <li>Limited in Range: Arrow keys only move one step at a time, whereas <code>hjkl</code> can be combined with counts or used in conjunction with other motions (<code>w</code>, <code>b</code>, <code>e</code>, etc.) to navigate text more intelligently.</li> </ol> <p>Do not feel ashamed if you want to stick to arrow keys for now. I also still find them kind of confusing after 3 decades of using the arrow keys \ud83d\ude05</p>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#word-motions-normal-mode","title":"Word Motions (Normal Mode)","text":"<p>Motions are commands that move the cursor position. Here are most of the word based motions:</p> <ul> <li> <p><code>w</code>: word : Jump forward to the beginning of the next word.</p> <p></p> </li> <li> <p><code>W</code>: Word no whitespaces Jump forward to the beginning of the next word, ignoring punctuation.</p> <p></p> </li> <li> <p><code>b</code>: back : Jump backward to the beginning of the current/previous word.</p> <p></p> </li> <li> <p><code>B</code>: Back no whitespaces : Jump backward to the beginning of the current/previous word, ignoring punctuation.</p> <p></p> </li> <li> <p><code>e</code>: end : Jump forward to the end of the current/next word.</p> <p></p> </li> <li> <p><code>E</code>: End no whitespaces : Jump forward to the end of the current/next word, ignoring punctuation.</p> <p></p> </li> <li> <p><code>ge</code>: end backwards : Jump backward to the end of the previous word.</p> <p></p> </li> <li> <p><code>gE</code>: end backwards no whitespaces : Jump backward to the end of the previous word, ignoring punctuation.</p> <p></p> </li> </ul>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#insert-mode-keys","title":"Insert Mode Keys","text":"<p>To prepare for this we will start with a new file, press <code>i</code> \u2192 type <code>foobar</code> \u2192 press <code>Esc</code> and move to the second <code>o</code>. After pressing <code>Esc</code> when testing each insert key, you can press <code>u</code> one to return to <code>foobar</code> (we will go deeper in the undo at later week)</p> <p>Try each command on your own a few time to better understand how it works.</p> <ul> <li> <p><code>i</code> insert : Enters Insert Mode on the cursor position.     <code>foo|bar</code> \u2192 Press <code>i</code> \u2192 Type <code>hello</code>  \u2192 Press <code>Esc</code> \u2192 <code>fohello|obar</code>.</p> <p></p> </li> <li> <p><code>I</code> Insert at the beginning : Enters Insert Mode at the beginning of the current line (right before first non whitespace character)     <code>foo|bar</code> \u2192 Press <code>I</code> \u2192 Type <code>hello</code> \u2192 Press <code>Esc</code> \u2192 <code>hellofoobar</code>.</p> <p></p> </li> <li> <p><code>a</code> append : Enters Insert Mode after the cursor.     <code>foo|bar</code> \u2192 Press <code>a</code> \u2192 Type <code>hello</code> \u2192 Press <code>Esc</code> \u2192 <code>foohello|bar</code>.</p> <p></p> </li> <li> <p><code>A</code> Append at the end : Enters Insert Mode at the end of the current line.     <code>foo|bar</code> \u2192 Press <code>A</code> \u2192 Type <code>hello</code> \u2192 Press <code>Esc</code> \u2192 <code>foobarhello|</code>.</p> <p></p> </li> <li> <p><code>o</code> open line Creates a new line below the current one and enter Insert Mode.     <code>foo|bar</code> \u2192 Press <code>o</code> \u2192 Type <code>hello</code> \u2192 Press <code>Esc</code> \u2192     <pre><code>foobar\nhello|\n</code></pre> </p> </li> <li> <p><code>O</code> Open line above Creates a new line above the current one and enter Insert Mode.     <code>foo| bar</code> \u2192 Press <code>o</code> \u2192 Type <code>hello</code> \u2192 Press <code>Esc</code> \u2192     <pre><code>hello|\nfoobar\n</code></pre> </p> </li> </ul>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#changes-and-undo-command","title":"Changes and Undo Command","text":"","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#what-is-a-change","title":"What is a Change?","text":"<p>In Vim, most actions that modify the text are considered changes, meaning they are recorded in Vim\u2019s undo history. This includes:</p> <ul> <li>Deleting, changing text from normal mode.</li> <li>Text insertions made in Insert Mode.</li> <li>Replacing characters in replace mode.</li> <li>We will learn more.</li> </ul> <p>Each change and sometimes a group of changes is recorded as a single step in the undo history. For example: Typing several words in a single Insert Mode session (before returning to Normal Mode) is grouped as one undoable change. This makes undoing changes very efficient and more importantly predictable.</p>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#the-u-command","title":"The <code>u</code> Command","text":"<p>The <code>u</code> command is used to undo change. You can repeatedly press <code>u</code> to continue undoing earlier changes.</p>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#tips-for-using-u","title":"Tips for Using <code>u</code>","text":"<ul> <li>Changes made in Insert Mode are grouped into a single undo step. Exit Insert Mode (<code>Esc</code>) after completing logical changes to keep them grouped.</li> <li>For efficient undoing, keep your Insert Mode sessions focused on specific edits. This helps you track and manage undoable changes better.</li> <li>If you undo too many steps, you can redo the changes using <code>Ctrl-r</code>. (r for redo)</li> </ul>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#extra-tips","title":"Extra Tips","text":"<ul> <li>Mnemonics: As you can see there is an easy mnemonics for these command so there is almost nothing to remember.</li> <li>Pattern: You may have noticed but there is a logical pattern for capital letter commands.</li> <li>When in doubt, hit <code>Esc</code>!<ul> <li>Pressing <code>Esc</code> multiple times ensures you return to Normal Mode in most scenarios.</li> </ul> </li> <li>Instead of Escape: Since Esc is not in the most convenient place there are other options:<ul> <li>You can remap the caps-lock to Esc. I personally find the caps-lock completely useless, but at nice place to press with my pinky and this is my favorite options. You can google how to do this from your OS.</li> <li>People commonly remap <code>jj</code> or <code>jk</code> as escape - this is easy to do in vim we will cover this later or you can google it now if you are interested in this approach it is really easy to do.</li> </ul> </li> </ul>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#cheatsheet","title":"CheatSheet","text":"<p>Modes:</p> <ul> <li><code>Esc</code>: Enter Normal Mode.</li> </ul> <p>Enter Insert Mode:</p> <ul> <li><code>i</code>, <code>I</code>: insert</li> <li><code>a</code>, <code>A</code>: append</li> <li><code>o</code>, <code>O</code>: open line</li> </ul> <p>Word Motions:</p> <ul> <li><code>w</code>, <code>W</code>: word (with/without punctuation).</li> <li><code>b</code>, <code>B</code>: back word (with/without punctuation).</li> <li><code>e</code>, <code>E</code>: end of word (with/without punctuation).</li> <li><code>ge</code>, <code>gE</code>: end of previous word (with/without punctuation).</li> </ul> <p>Undo/Redo</p> <ul> <li><code>u</code>: undo</li> <li><code>C-r</code>: redo</li> </ul>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#exercises","title":"Exercises","text":"<p>Here\u2019s a sample text you can use for the exercises: <pre><code>The quick brown fox jumps over the lazy dog. \nLorem ipsum dolor sit amet, consectetur adipiscing elit. \nVivamus luctus urna sed urna ultricies ac tempor dui sagittis. \nInteger vel nisi-id arcu_viverra vehicula eget ac odio.\n</code></pre></p> <p>When you are in normal mode you can press <code>u</code> to undo your last change, you can also use the hjkl keys, arrow keys or the mouse for this exercise</p>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#exercises-word-motions","title":"Exercises: Word Motions","text":"","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#exercise-w-move-forward-to-the-beginning-of-the-next-word","title":"Exercise: <code>w</code> (Move forward to the beginning of the next word)","text":"<ol> <li>Start at the beginning of the first line and move the cursor to \"fox\" using only <code>w</code>.</li> <li>Start at the word \"Lorem\" in the second line and move to \"consectetur\" using only  <code>w</code>.</li> <li>Navigate from \"Integer\" to \"vehicula\" on the fourth line using only <code>w</code>.</li> </ol>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#exercise-w-move-forward-to-the-beginning-of-the-next-word-ignoring-punctuation","title":"Exercise: <code>W</code> (Move forward to the beginning of the next word, ignoring punctuation)","text":"<ol> <li>Start at the beginning of the first line and move the cursor to \"fox\" using only <code>W</code>.</li> <li> <ol> <li>Start at the word \"Lorem\" in the second line and move to \"consectetur\" using only  <code>W</code>.</li> </ol> </li> <li>Navigate from \"Integer\" to \"vehicula\" on the fourth line using only <code>W</code>.</li> </ol>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#exercise-b-move-backward-to-the-beginning-of-the-currentprevious-word","title":"Exercise: <code>b</code> (Move backward to the beginning of the current/previous word)","text":"<ol> <li>Start at the word \"over\" in the first line and move backward to \"brown\" using <code>b</code> twice.</li> <li>Navigate from \"vehicula\" in the fourth line back to \"Integer\" using only <code>b</code>.</li> <li>Start at \"adipiscing\" in the second line and move to \"Lorem\" using <code>b</code>.</li> </ol>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#exercise-b-move-backward-to-the-beginning-of-the-currentprevious-word-ignoring-punctuation","title":"Exercise: <code>B</code> (Move backward to the beginning of the current/previous word, ignoring punctuation)","text":"<ol> <li>Start at \"tempor\" in the third line and move to \"Vivamus\" using <code>B</code>.</li> <li>From \"consectetur\" in the second line, move to \"Lorem\" using <code>B</code> repeatedly.</li> <li>Navigate from \"vehicula\" in the fourth line back to \"Integer\" using only <code>B</code>.</li> </ol>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#exercise-e-move-forward-to-the-end-of-the-currentnext-word","title":"Exercise: <code>e</code> (Move forward to the end of the current/next word)","text":"<ol> <li>Start at \"The\" in the first line and move to \"brown\" using <code>e</code> twice.</li> <li>Move from \"Integer\" to the end of \"eget\" in the second line using <code>e</code> repeatedly.</li> <li>Start at \"Vivamus\" and move to \"ultricies\" in the third line using only <code>e</code>.</li> </ol>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#exercise-e-move-forward-to-the-end-of-the-currentnext-word-ignoring-punctuation","title":"Exercise: <code>E</code> (Move forward to the end of the current/next word, ignoring punctuation)","text":"<ol> <li>Start at \"Lorem\" in the second line and move to the end of \"adipiscing\" using <code>E</code> repeatedly.</li> <li>Move from \"Integer\" to the end of \"eget\" in the second line using <code>E</code> repeatedly.</li> <li>Move from \"brown\" to the end of \"dog\" in the first line using <code>E</code>.</li> </ol>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#exercise-ge-move-backward-to-the-end-of-the-previous-word","title":"Exercise: <code>ge</code> (Move backward to the end of the previous word)","text":"<ol> <li>Start at \"dog\" in the first line and move to \"jumps\" using <code>ge</code> repeatedly.</li> <li>Place the cursor on \"vehicula\" in the forth line and move back to \"Integer\" using <code>ge</code> repeatedly.</li> <li>Move from \"sagittis\" in the third line to \"Vivamus\" using <code>ge</code>.</li> </ol>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#excercise-ge-move-backward-to-the-end-of-the-previous-word-ignoring-punctuation","title":"Excercise: <code>gE</code> (Move backward to the end of the previous word, ignoring punctuation)","text":"<ol> <li>Start at \"vehicula\" in the fourth line and move back to \"Integer\" using <code>gE</code>.</li> <li>From \"adipiscing\" in the second line, move to \"Lorem\" using <code>gE</code> repeatedly.</li> <li>Navigate from \"dog\" in the first line back to \"brown\" using only <code>gE</code>.</li> </ol>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#exercises-insert-mode-keys","title":"Exercises: Insert Mode Keys","text":"<p>When you are back in normal mode you can press <code>u</code> to undo a change.</p>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#exercise-i-insert-before-the-cursor","title":"Exercise: <code>i</code> (Insert before the cursor)","text":"<ol> <li>Place the cursor on the word \"quick\" and add the word \"very\" before it. Go back to Normal mode<ul> <li>The very quick brown fox jumps over the lazy dog.`</li> </ul> </li> <li>Place the cursor on the word \"consectetur\" and type <code>NOT</code>. Go back to Normal mode<ul> <li>Lorem ipsum dolor sit amet, NOTconsectetur adipiscing elit.`</li> </ul> </li> <li>Insert the text \"Hello! \" at the start of the second line. Go back to Normal mode<ul> <li>Hello! Lorem ipsum dolor sit amet, consectetur adipiscing elit.`</li> </ul> </li> </ol>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#exercise-i-insert-at-the-beginning-of-the-line","title":"Exercise: <code>I</code> (Insert at the beginning of the line)","text":"<ol> <li>Move to the third line and add \"NOTE: \" at the beginning. Go back to Normal mode<ul> <li>NOTE: Vivamus luctus urna sed urna ultricies ac tempor dui sagittis.`</li> </ul> </li> <li>Add \"INFO: \" at the start of the fourth line. Go back to Normal mode<ul> <li>INFO: Integer vel nisi-id arcu_viverra vehicula eget ac odio.`</li> </ul> </li> <li>Insert \"=&gt; \" at the start of the first line. Go back to Normal mode<ul> <li>=&gt; The quick brown fox jumps over the lazy dog.`</li> </ul> </li> </ol>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#exercise-a-insert-after-the-cursor","title":"Exercise: <code>a</code> (Insert after the cursor)","text":"<ol> <li>Place the cursor on \"jumps\" and add the word \"high\" after it.<ul> <li>The quick brown fox jumps high over the lazy dog.`</li> </ul> </li> <li>Place the cursor on \"tempor\" and add \"is important\" after it.<ul> <li>Vivamus luctus urna sed urna ultricies ac tempor is important dui sagittis.`</li> </ul> </li> <li>Move to the end of \"dog.\" and add \" Isn't it?\".<ul> <li>The quick brown fox jumps over the lazy dog. Isn't it?`</li> </ul> </li> </ol>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#exercise-a-insert-at-the-end-of-the-line","title":"Exercise: <code>A</code> (Insert at the end of the line)","text":"<ol> <li>Move to the first line and append \" (sentence one)\".<ul> <li>The quick brown fox jumps over the lazy dog. (sentence one)`</li> </ul> </li> <li>Add \" [done]\" to the end of the second line.<ul> <li>Lorem ipsum dolor sit amet, consectetur adipiscing elit. [done]`</li> </ul> </li> <li>Append \" \u2013 important details\" to the third line.<ul> <li>Vivamus luctus urna sed urna ultricies ac tempor dui sagittis. \u2013 important details`</li> </ul> </li> </ol>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#exercise-o-insert-on-a-new-line-below","title":"Exercise: <code>o</code> (Insert on a new line below)","text":"<ol> <li> <p>Place the cursor anywhere on the first line and create a new line below with \"This is a new line.\".     <pre><code>The quick brown fox jumps over the lazy dog.\nThis is a new line.\n</code></pre></p> </li> <li> <p>Create a new line below the second line with \"Additional information here.\".     <pre><code>Lorem ipsum dolor sit amet, consectetur adipiscing elit.\nAdditional information here.\n</code></pre></p> </li> <li> <p>Add a new line below the fourth line and type \"End of document.\".     <pre><code>Integer vel nisi id arcu viverra vehicula eget ac odio.\nEnd of document.\n</code></pre></p> </li> </ol>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#exercise-o-insert-on-a-new-line-above","title":"Exercise: <code>O</code> (Insert on a new line above)","text":"<ol> <li> <p>Place the cursor anywhere on the third line and add a new line above with \"Header line:\".     <pre><code>Header line:\nVivamus luctus urna sed urna ultricies ac tempor dui sagittis.\n</code></pre></p> </li> <li> <p>Add a new line above the first line with \"Start:\".     <pre><code>Start: The quick brown fox jumps over the lazy dog.```\n</code></pre></p> </li> <li> <p>Insert a blank line above the fourth line and type \"Section Divider\".     <pre><code>Integer vel nisi id arcu viverra vehicula eget ac odio. Section Divider\n</code></pre></p> </li> </ol>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#practice","title":"Practice","text":"<ul> <li>Switching Modes: Practice using Insert Mode commands (<code>i</code>, <code>I</code>, <code>a</code>, <code>A</code>, <code>o</code>, <code>O</code>) to enter text at different positions. After completing each insertion, press <code>Esc</code> to return to Normal Mode and use motions to navigate. Focus hard on building the habit of returning to Normal Mode for movement and commands as this would be a big efficiency boost</li> <li>Using Word Motions: Pay attention to navigating horizontally using all word motions (<code>w</code>, <code>W</code>, <code>e</code>, <code>E</code>, <code>b</code>, <code>B</code>, <code>ge</code>, <code>gE</code>).</li> <li>Undo/Redo: Instead of relying on VSCode\u2019s undo/redo, practice using Vim's <code>u</code> to undo changes and <code>Ctrl-r</code> to redo them. Observe how changes in Insert Mode are grouped into undo blocks and use this to your advantage when correcting mistakes.</li> <li>Efficient Workflow: As you practice, evaluate whether your mode switches and motions are efficient. Are you navigating effectively with word motions? Are you returning to Normal Mode consistently after edits? Reflect and adjust as needed to improve your flow.</li> </ul>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2001%20Normal%20Mode%2C%20Insert%20Mode%20and%20Basic%20Word%20Motions/#further-reading","title":"Further Reading","text":"<ul> <li>Insert Mode</li> <li>Word Motions</li> </ul>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2002%20Basic%20Operators%20and%20the%20Dot%20Command/","title":"Week 02 Basic Operators and the Dot Command","text":"","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2002%20Basic%20Operators%20and%20the%20Dot%20Command/#goals","title":"Goals","text":"<p>By the end of this week, you should: - Understand and use the basic operators (<code>c</code>, <code>C</code>, <code>cc</code>, <code>d</code>, <code>D</code>, <code>dd</code>) to modify and manipulate text. - Learn how to combine these operators with motions for powerful precise editing. - Master the <code>.</code> (dot) command to repeat the last action, improving efficiency.</p>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2002%20Basic%20Operators%20and%20the%20Dot%20Command/#lesson","title":"Lesson","text":"<p>Operators are commands that act on text. They are not enough on their own and they are usually combined with a motion or text object to define the scope of the operation. For example, <code>d</code> (delete) combined with <code>e</code> (word motion) deletes till end (<code>de</code>). This combination of operators and motions is fundamental to Vim's power and flexibility.</p>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2002%20Basic%20Operators%20and%20the%20Dot%20Command/#operator-pending-mode","title":"Operator Pending Mode","text":"<p>Operator-pending mode starts after an operator command, and puts Vim in waiting for a {motion/text-object} to specify the text that the operator will work on. This will become crystal clear with the examples in the next section.</p> <p>When in operator-pending mode you usually see the operator in the status bar. Press <code>c</code> once and check where this is visible in the status bar, the operator won't do anything to the text on its own. You can press Escape to go back to normal mode.</p> <p>Note: in vscode this is usually where you <code>-- INSERT --</code>, but it quickly disappears after the keypress to not clutter the status bar.</p>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2002%20Basic%20Operators%20and%20the%20Dot%20Command/#operators","title":"Operators","text":"<ul> <li> <p><code>c</code> change : Deletes the specified text and enters Insert Mode. By default deleted text is also copied into the clipboard (for vim this is a special register - we will cover this later).     <code>ce</code> changes till the end of the word under the cursor.     TODO Gif example</p> </li> <li> <p><code>d</code> delete : Deletes the specified text. By default deleted text is also copied.     <code>db</code> deletes back to the beginning of the current word.     TODO Gif example</p> </li> </ul> <p>Note: hjkl and arrow keys are also navigation commands so you can combine them with the operators.</p> <p>All this may not seem far too useful yet, but it is laying the foundation for the future and thrust me on this we will soon learn a bit more navigation commands and text objects.</p>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2002%20Basic%20Operators%20and%20the%20Dot%20Command/#shortcuts","title":"Shortcuts","text":"<p>Vim provides some very quick shortcuts in combination with the above operators.</p> <ul> <li> <p><code>C</code> Change to end of line : Deletes everything from the cursor to the end of the line and enters insert mode.     TODO Gif example</p> </li> <li> <p><code>cc</code> change whole line : Deletes the entire line and enters insert mode.     TODO Gif example</p> </li> <li> <p><code>D</code> Delete to end of line : Deletes from the cursor to the end of the line.     TODO Gif example</p> </li> <li> <p><code>dd</code> Delete whole line : Deletes the entire line.     TODO Gif example</p> </li> </ul> <p>You should be seeing the pattern here.</p>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2002%20Basic%20Operators%20and%20the%20Dot%20Command/#dot-command","title":". (dot command)","text":"<p>The <code>.</code> command repeats the last text changing command you executed. This is a key feature of Vim that enhances productivity by reducing repetition and this is one of the major features that really got me into vim in the first place.</p> <p>Examples: - After typing <code>de</code> to delete till the end of a word, press <code>.</code> to delete again.     TODO Gif example</p> <ul> <li>Navigate to beginning of a word Use <code>cw</code> to change word, type something and press Escape, then navigate with <code>w</code> to the beginning of the next word and press <code>.</code> to repeat the previous change for the word under the cursor.     TODO Gif example</li> </ul>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2002%20Basic%20Operators%20and%20the%20Dot%20Command/#cheatsheet","title":"CheatSheet","text":"<p>Operators: - <code>c</code>: change - <code>C</code>: Change to end of line - <code>cc</code>: change line - <code>d</code>: delete - <code>D</code>: Delete to end of line - <code>dd</code>: delete line</p> <p>Dot Command: - <code>.</code>: Repeats the last change command.</p>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2002%20Basic%20Operators%20and%20the%20Dot%20Command/#exercise","title":"Exercise","text":"<p>Here\u2019s a sample text you can use for the exercises: <pre><code>The quick brown fox jumps over the lazy dog. \nLorem ipsum dolor sit amet, consectetur adipiscing elit. \nVivamus luctus urna sed urna ultricies ac tempor dui sagittis. \nInteger vel nisi-id arcu_viverra vehicula eget ac odio.\n</code></pre></p> <p>Reminder: When you are in normal mode you can press <code>u</code> to undo your last change, you can also use the hjkl keys, arrow keys or the mouse for this exercise</p> <p>When doing the exercises to better understand how the operators work try to focus on moving horizontally using word motions.</p>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2002%20Basic%20Operators%20and%20the%20Dot%20Command/#operators_1","title":"Operators","text":"","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2002%20Basic%20Operators%20and%20the%20Dot%20Command/#exercise-c","title":"Exercise: <code>c</code>:","text":"<ul> <li>Use <code>ce</code> to replace \"quick\" with \"speedy\" in the sentence: <code>The quick brown fox</code>.</li> <li>Try <code>cc</code> to replace \"Lorem ipsum...\" line with \"Something el\u2013se\".</li> <li>Use <code>C</code> to replace everything after \"fox\" in: <code>The quick brown fox</code>.</li> </ul>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2002%20Basic%20Operators%20and%20the%20Dot%20Command/#exercise-d","title":"Exercise: <code>d</code>:","text":"<ul> <li>Use <code>de</code> to delete \"quick\" in the sentence: \"The quick brown fox\".</li> <li>Use <code>dd</code> to delete the entire second line.</li> <li>Try <code>D</code> to delete the content after \"brown\".</li> </ul>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2002%20Basic%20Operators%20and%20the%20Dot%20Command/#repeat","title":"Repeat","text":"","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2002%20Basic%20Operators%20and%20the%20Dot%20Command/#exercise_1","title":"Exercise: <code>.</code>**:","text":"<ul> <li>After using <code>dw</code>, <code>db</code>, <code>de</code> or something else, press <code>.</code> to delete delete another.</li> <li>navigate to the beginning a of a word change using the <code>c</code> operator and motion like <code>e</code>, write something, go back to normal mode, then navigate to another word and press <code>.</code>, it will repeat the change and </li> </ul>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2002%20Basic%20Operators%20and%20the%20Dot%20Command/#practice","title":"Practice","text":"<ul> <li>Using Operators with Word Motions: Focus on combining <code>c</code> and<code>d</code>with word motions like <code>w</code>, <code>e</code>, and <code>b</code>. Instead of jumping into Insert Mode right away, think about the text you want to modify and use motions to define the scope of your operation.</li> <li>Switching Modes: After making a change with <code>c</code> or deleting text with <code>d</code>, remember to return to Normal Mode for navigation. \u26a0\ufe0f Avoid staying in Insert Mode longer than necessary.</li> <li>Navigating with Word Motions: While practicing operators, keep your focus on navigating efficiently using word motions (<code>w</code>, <code>e</code>, <code>b</code>). Use them to position the cursor precisely before applying an operator.</li> <li>Repetition with the Dot Command: Train yourself to repeat actions with the <code>.</code> command. Plan your edits so you can make one precise operation and then repeat it as needed. For example, delete multiple words or change several similar patterns using <code>.</code>.</li> <li>Evaluate Your Workflow and Efficiency: Are you efficiently combining operators with motions? Are you using the <code>.</code> command to avoid repeating the same sequence of commands manually? Try different approaches to improve.</li> </ul>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2002%20Basic%20Operators%20and%20the%20Dot%20Command/#further-reading","title":"Further Reading","text":"<ul> <li>Vim Operators</li> <li>Dot Command</li> </ul>","tags":["vim","learning","teaching"]},{"location":"Weekly%20Tutorials/Week%2003%20Repeat%20Count/","title":"Week 03 Repeat Count","text":""},{"location":"Weekly%20Tutorials/Week%2003%20Repeat%20Count/#goals","title":"Goals","text":"<p>By the end of this week, you should:</p> <ul> <li>Understand how to use numbers to repeat a command multiple times.</li> <li>Learn how to numbers with motions and operators to perform efficient text editing.</li> <li>Practice using numbers in combination with the <code>.</code> command for even greater efficiency.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2003%20Repeat%20Count/#lesson","title":"Lesson","text":"<p>In Vim, you can precede most commands with a number to repeat them that many times. Repeats can be applied to motions, operators, macros, and even combined with the <code>.</code> command to repeat sequences of actions efficiently.</p>"},{"location":"Weekly%20Tutorials/Week%2003%20Repeat%20Count/#using-repeat-counts-with-basic-commands","title":"Using Repeat Counts with Basic Commands","text":"<p>Basic Motion Keys with Repeat Count: Repeats allow you to move multiple times with a single command.</p> <ul> <li><code>5j</code>: Move down 5 lines.</li> <li><code>3w</code>: Move forward 3 words.</li> <li><code>7h</code>: Move left 7 characters.</li> </ul> <p>Insert Mode with Repeat Count: While repeat counts are less common for Insert Mode commands, they can be used to create multiple lines.</p> <ul> <li><code>15i</code> : repeat this insert 15 times. An example would be using dash <code>15i-Esc</code> -&gt; this will create <code>---------------</code></li> <li><code>5o</code>: Create the same insert with 5 new lines below the current one.</li> </ul> <p>Operators with Repeat Count: Combine operators with repeat counts to act on larger portions of text.</p> <ul> <li><code>d2w</code>: Delete 2 words starting from the cursor.</li> <li><code>3dd</code>: Delete 3 lines</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2003%20Repeat%20Count/#combining-repeat-counts-with-the-command","title":"Combining Repeat Counts with the <code>.</code> Command","text":"<p>The <code>.</code> command repeats the last change command, and it works seamlessly with repeat counts. For example:</p> <ul> <li>Use <code>d2w</code> to delete 2 words.</li> <li>Press <code>.</code> to delete the next 2 words.</li> <li>Combining this with a repeat count, like <code>3.</code>, however to repeat the action changing the number for example <code>3.</code> will do <code>d3w</code>.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2003%20Repeat%20Count/#practice","title":"Practice","text":"<ul> <li>Using Repeats/Counts with Motions: Focus on combining repeat counts with motions like <code>j</code>, <code>w</code>, and <code>e</code>. Practice navigating efficiently by using counts instead of repeating motions multiple times.</li> <li>Repeat Counts with Operators: Work on combining repeat counts with operators like <code>d</code>, <code>c</code>, and <code>y</code>. Focus on editing multiple words or lines in a single command to streamline your workflow.</li> <li>Integrating the <code>.</code> Command: Pay attention to how repeat counts can enhance the effectiveness of the <code>.</code> command. Practice planning edits so you can repeat them logically and efficiently with <code>.</code>.</li> <li>Efficiency Evaluation: As you use repeat counts, evaluate if the number you chose is optimal for the task or if a different motion/operator combination would be more efficient.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2004%20Text%20Object/","title":"Week 04 Text Object","text":""},{"location":"Weekly%20Tutorials/Week%2004%20Text%20Object/#goals","title":"Goals","text":"<p>By the end of this week, you should:</p> <ul> <li>Understand the concept of text objects in Vim.</li> <li>Learn how to use default text objects for efficient text selection and manipulation.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2004%20Text%20Object/#lesson","title":"Lesson","text":"<p>A text object is a powerful Vim concept that allows you to operate on a logical unit of text. Text objects are used with operators like <code>d</code> (delete), <code>y</code> (yank), and <code>c</code> (change) to perform actions on specific regions of text, such as words, paragraphs, or blocks.</p> <p>Text objects are typically used with two components:</p> <p>A command (e.g., <code>d</code> for delete, <code>c</code> for change) and the text object (e.g., <code>iw</code> for \"inner word\" or <code>ap</code> for \"a/around paragraph\").</p> <p>One advantage over the word motions is that you don need to be at the start or beginning of a word to change it, with text object you can be in an arbitrary character of the word.</p>"},{"location":"Weekly%20Tutorials/Week%2004%20Text%20Object/#note","title":"Note","text":"<p>Text objects can be extended with plugins to add more functionality. We will cover such plugins in future weeks.</p>"},{"location":"Weekly%20Tutorials/Week%2004%20Text%20Object/#default-text-objects","title":"Default Text Objects","text":"<p>The default text objects in Vim start with <code>i</code> (inner, inside) or <code>a</code> (a, around)</p> <p><code>a</code> and <code>i</code> : a/around and inner/inside</p> <ul> <li><code>a</code> : Includes surrounding delimiters/whitespace (if applicable).</li> <li><code>i</code> : Excludes surrounding delimiters/whitespace.</li> </ul> <p><code>p</code>: paragraph is defined as a block of text separated by one or more blank lines. It includes the text up to (but not including) the next blank line or the start/end of the file.</p> <ul> <li><code>ap</code> : A/Around the paragraph (including trailing blank lines).</li> <li><code>ip</code> : Inner paragraph (excluding trailing blank lines).</li> </ul> <p><code>w</code> : word consists of a sequence of letters, digits and underscores, or a sequence of other non-blank characters, separated with white space (spaces, tabs, <code>&lt;EOL&gt;</code>).</p> <ul> <li><code>aw</code>: Includes the trailing whitespace.</li> <li><code>iw</code>: Inner word, excluding the whitespace.</li> </ul> <p><code>W</code> : WORD consists of a sequence of non-blank characters, separated with white space.</p> <ul> <li><code>aw</code>: Includes the trailing whitespace.</li> <li><code>iw</code>: Inner word, excluding the whitespace.</li> </ul> <p><code>s</code> : sentence is defined as text ending with a sentence-ending punctuation mark (<code>.</code>, <code>!</code>, or <code>?</code>), followed by one or more spaces or the end of the line.</p> <ul> <li><code>as</code> : Includes trailing whitespace and punctuation.</li> <li><code>is</code> : Inner sentence, excluding trailing whitespace and punctuation.</li> </ul> <p><code>[</code>, <code>(</code>, <code>{</code>, <code>&lt;</code> : Blocks These are used to operate on various block structures:</p> <ul> <li><code>i(</code> or <code>i)</code> for \"inner parentheses\"</li> <li><code>a(</code> or <code>a)</code> for \"around parentheses\" (including the parentheses).</li> <li><code>i[</code> or <code>i]</code> for \"inner square brackets\".</li> <li><code>a[</code> or <code>a]</code> for \"around square brackets\" (including the brackets).</li> <li><code>i{</code> or <code>i}</code> for \"inner curly braces\".</li> <li><code>a{</code> or <code>a}</code> for \"around curly braces\" (including the braces).</li> <li><code>i&lt;</code> or <code>i&gt;</code> for \"inner angle brackets\".</li> <li><code>a&lt;</code> or <code>a&gt;</code> for \"around angle brackets\" (including the brackets).</li> </ul> <p><code>'</code>, <code>\"</code>, <code>`</code> : Quoted Strings</p> <ul> <li><code>i'</code> : for \"inside single-quoted\" string.</li> <li><code>a'</code> : for \"a single-quoted\" (including the quotes).</li> <li><code>i\"</code> : for \"inside double-quoted\" string.</li> <li><code>a\"</code> : for \"a double-quoted\" string (including the quotes).</li> <li><code>i`</code>  : for \"inside back-tick-quoted\" string</li> <li><code>a`</code>  : for \"a back-tick-quoted\" string (including the quotes).</li> </ul> <p><code>b</code>, <code>B</code> : Blocks by Type - I personally prefer to specify the text object.</p> <ul> <li><code>b</code> : Operates on a block delimited by <code>[</code> or <code>(</code>.</li> <li><code>B</code> : Operates on a block delimited by <code>{</code> or <code>[</code>.</li> </ul> <p><code>t</code>: XML or HTML Tag</p> <ul> <li><code>at</code> : Select the entire tag, including the opening and closing tags.</li> <li><code>it</code> : Select only the content inside the tags.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2004%20Text%20Object/#usage-examples","title":"Usage Examples","text":"<ul> <li><code>ci\"</code>: Change inside double quotes.     <code>\"quick brown fox\"</code> \u2192 <code>\"new content\"</code>.</li> <li><code>di[</code>: Delete inside square brackets.     <code>[quick brown fox]</code> \u2192 <code>[]</code>.</li> </ul> <p>Here is a list from with more examples to better visualize\u00a0what is possible, this list is not exhaustive, there are far more combinations, feel free to play around:</p> <ul> <li><code>dl</code> : delete character under the curson</li> <li><code>dh</code> : delete character to the left</li> <li><code>daw</code> : delete a word</li> <li><code>diW</code> : delete inner WORD</li> <li><code>daW</code> : delete a WORD</li> <li><code>das</code> : delete a sentence</li> <li><code>dip</code> : delete inner paragraph</li> <li><code>dap</code> : delete a paragraph</li> <li><code>dib</code> : delete inner '(...)' block</li> <li><code>di)</code> : delete inner '(...)' block</li> <li><code>dab</code> : delete a '(...)' block</li> <li><code>diB</code> : delete inner '{...}' block</li> <li><code>di}</code> : delete inner '{...}' block</li> <li><code>daB</code> : delete a '{...}' block</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2004%20Text%20Object/#cheatsheet","title":"CheatSheet","text":"<p>General Syntax: <code>[operator][a/i][text object]</code> - <code>a</code> : a/around - <code>i</code> : inner/inside.</p> <p>Text Objects: - <code>p</code>, <code>w</code>, <code>s</code> : paragraph, word, sentence. - <code>[</code>, <code>(</code>, <code>{</code>, <code>&lt;</code> : Blocks. - <code>'</code>, <code>\"</code>, <code>`</code> : Quoted strings. - <code>b</code>, <code>B</code> : Blocks by type. - <code>t</code> : &lt;tag&gt; blocks.</p>"},{"location":"Weekly%20Tutorials/Week%2004%20Text%20Object/#practice","title":"Practice","text":"<ul> <li>Text objects are really efficient, focus on figuring out all the places you can utilize them</li> <li> <p>Whenever you use a motion think if this motion is efficient enough or can you use a text object to do your change with less effort</p> </li> <li> <p>Using Text Objects: Focus on identifying scenarios where text objects make your edits faster and more precise. Practice  editing logical chunks of text like paragraphs, sentences, or blocks instead of relying on manual navigation.</p> </li> <li>Inner vs. Around: Pay close attention to the difference between <code>i</code> (inner) and <code>a</code> (around). Experiment with when to include or exclude surrounding delimiters for efficient edits.</li> <li>Combining with Operators: Practice combining text objects with operators like <code>d</code>, <code>c</code>, and <code>y</code>. Aim to minimize the steps needed to perform edits on structured text.</li> <li>Efficiency: As you use text objects, evaluate whether the motion or text object you chose was the most efficient for the task. Explore alternative text objects when applicable.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2004%20Text%20Object/#further-reading","title":"Further Reading","text":"<ul> <li>Neovim Text Objects Documentation</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2005%20Find%20and%20Till/","title":"Week 05 Find and Till","text":""},{"location":"Weekly%20Tutorials/Week%2005%20Find%20and%20Till/#goals","title":"Goals","text":"<p>By the end of this week, you will:</p> <ul> <li>Understand how to use the <code>f</code>, <code>F</code>, <code>t</code>, and <code>T</code> commands to navigate efficiently within a line.</li> <li>Learn to use <code>;</code> and <code>,</code> to repeat find and till motions.</li> <li>Combine these commands with <code>d</code>, <code>c</code>, and the <code>.</code> operator to perform powerful and repeatable edits.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2005%20Find%20and%20Till/#lesson","title":"Lesson","text":"<p>The Find and Till commands are line-scoped motions that allow you to jump to specific characters or just before them. These commands are useful for precise navigation and editing within a line.</p>"},{"location":"Weekly%20Tutorials/Week%2005%20Find%20and%20Till/#find-motions-f-and-f","title":"Find Motions (<code>f</code> and <code>F</code>)","text":"<ul> <li> <p><code>f&lt;char&gt;</code>: find the next occurrence of <code>&lt;char&gt;</code> on the current line and places the caret on the <code>&lt;char&gt;</code>.     <code>The quick brown fox jumps over the lazy dog.</code></p> <ul> <li>Press <code>fq</code>: The cursor moves to the <code>q</code> in \"quick\".</li> </ul> </li> <li> <p><code>F&lt;char&gt;</code>: same as <code>f</code> but finding previous <code>&lt;char&gt;</code> .     <code>The quick brown fox jumps over the lazy dog.</code></p> <ul> <li>Place the cursor at the end of the line and press <code>Fo</code>: The cursor moves to the <code>l</code> in \"lazy\".</li> </ul> </li> </ul>"},{"location":"Weekly%20Tutorials/Week%2005%20Find%20and%20Till/#tillto-motions-t-and-t","title":"Till/To Motions (<code>t</code> and <code>T</code>)","text":"<ul> <li> <p><code>t&lt;char&gt;</code>: find till next occurrence of <code>&lt;char&gt;</code> on the current line and places the just before the <code>&lt;char&gt;</code>.     <code>The quick brown fox jumps over the lazy dog.</code></p> <ul> <li>Press <code>tq</code>: The cursor moves to just before the <code>q</code> in \"quick\".</li> </ul> </li> <li> <p><code>T&lt;char&gt;</code>: same as <code>t</code> but for previous <code>&lt;char&gt;</code> .     <code>The quick brown fox jumps over the lazy dog.</code></p> <ul> <li>Place the cursor at the end of the line and press <code>Tl</code>: The cursor moves to just before the <code>l</code> in \"lazy\".</li> </ul> </li> </ul>"},{"location":"Weekly%20Tutorials/Week%2005%20Find%20and%20Till/#repeat-last-find-motions-and","title":"Repeat Last Find Motions (<code>;</code> and <code>,</code>)","text":"<ul> <li> <p><code>;</code>: Repeat the last <code>f</code>, <code>F</code>, <code>t</code>, or <code>T</code> motion in the same direction.     After pressing <code>fa</code> to find the first <code>a</code>, press <code>;</code> to find the next <code>a</code>.</p> </li> <li> <p><code>,</code>: Repeat the last <code>f</code>, <code>F</code>, <code>t</code>, or <code>T</code> motion in the opposite direction.     After pressing <code>fa</code> to find the first <code>a</code>, press <code>,</code> to go back to the previous <code>a</code>.</p> </li> </ul>"},{"location":"Weekly%20Tutorials/Week%2005%20Find%20and%20Till/#combining-with-operators","title":"Combining with Operators","text":"<p>The Find (<code>f</code>, <code>F</code>) and Till/To (<code>t</code>, <code>T</code>) commands are incredibly versatile when combined with operators like <code>d</code> (delete) and <code>c</code> (change). These combinations allow you to perform precise edits up to or just before a specific character.</p>"},{"location":"Weekly%20Tutorials/Week%2005%20Find%20and%20Till/#using-d-delete","title":"Using <code>d</code> (Delete)","text":"<p>The <code>d</code> operator, combined with Find or Till commands, deletes text from the current cursor position up to the target character.</p> <ul> <li><code>df&lt;char&gt;</code>: Delete from the cursor up to and including <code>&lt;char&gt;</code>.     In the sentence <code>The quick brown fox jumps.</code>, pressing <code>dfx</code> deletes <code>The quick brown fo</code>, leaving <code>x jumps.</code>.</li> <li><code>dt&lt;char&gt;</code>: Delete from the cursor up to but not including <code>&lt;char&gt;</code>.     In <code>The quick brown fox jumps.</code>, pressing <code>dtx</code> deletes <code>The quick brown fo</code>, leaving <code>x fox jumps.</code>.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2005%20Find%20and%20Till/#using-c-change","title":"Using <code>c</code> (Change)","text":"<p>The <code>c</code> operator, combined with Find or Till commands, deletes the text up to the target character and then enters Insert Mode to allow replacing the deleted content.</p> <ul> <li><code>cf&lt;char&gt;</code>: Change from the cursor up to and including <code>&lt;char&gt;</code>.     In <code>The quick brown fox jumps.</code>, pressing <code>cfx</code> deletes <code>The quick brown fox</code> and enters Insert Mode, allowing you to replace the text.</li> <li><code>ct&lt;char&gt;</code>: Change from the cursor up to but not including <code>&lt;char&gt;</code>.     In <code>The quick brown fox jumps.</code>, pressing <code>ctx</code> deletes <code>The quick brown fo</code> (excluding <code>x</code>) and enters Insert Mode.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2005%20Find%20and%20Till/#combining-with-operator","title":"Combining with <code>.</code> Operator","text":"<p>The <code>.</code> operator repeats the last change. This makes it incredibly powerful when combined with \"find\" and \"till\" motions.</p>"},{"location":"Weekly%20Tutorials/Week%2005%20Find%20and%20Till/#example","title":"Example:","text":"<ol> <li>Press <code>df,</code> to delete up to and including the first comma.</li> <li>Press <code>.</code> to delete up to and including the next comma.</li> </ol>"},{"location":"Weekly%20Tutorials/Week%2005%20Find%20and%20Till/#cheatsheet","title":"CheatSheet","text":"<p>Find and Till/To Commands:</p> <ul> <li><code>f&lt;char&gt;</code>: Find next <code>&lt;char&gt;</code>.</li> <li><code>F&lt;char&gt;</code>: Find previous <code>&lt;char&gt;</code>.</li> <li><code>t&lt;char&gt;</code>: To/Till next <code>&lt;char&gt;</code>.</li> <li><code>T&lt;char&gt;</code>: To/Till previous <code>&lt;char&gt;</code>.</li> <li><code>;</code>: Repeat the last <code>f</code>, <code>F</code>, <code>t</code>, or <code>T</code> motion in the same direction.</li> <li><code>,</code>: Repeat the last <code>f</code>, <code>F</code>, <code>t</code>, or <code>T</code> motion in the opposite direction.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2005%20Find%20and%20Till/#practice","title":"Practice","text":"<ul> <li>Find and Till Commands: Focus on using <code>f</code>, <code>F</code>, <code>t</code>, and <code>T</code> efficiently. Instead of moving manually to a character, train yourself to quickly jump to or just before the target character using these motions.</li> <li>Repeating Motions: Practice <code>;</code> and <code>,</code> to repeat Find and Till motions in both directions. Pay attention to how they streamline navigation without retyping commands.</li> <li>Combining with Operators: Experiment with combining Find and Till commands with <code>d</code> and <code>c</code>. Think about how you can make edits in a single step without needing to adjust the cursor afterward.</li> <li>Using the <code>.</code> Command: Focus on editing patterns where you can apply the <code>.</code> command to repeat changes efficiently. Plan your edits so they can be repeated with minimal input.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2005%20Find%20and%20Till/#further-reading","title":"Further Reading","text":"<ul> <li>Vim Motions</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2006%20Basic%20Clipboard/","title":"Week 06 Basic Clipboard","text":""},{"location":"Weekly%20Tutorials/Week%2006%20Basic%20Clipboard/#goals","title":"Goals","text":"<p>By the end of this week, you should:</p> <ul> <li>Know how to use clipboard-related commands in Vim, such as <code>c</code>, <code>d</code>, <code>x</code>, <code>y</code>, and <code>p</code>, for cutting, copying, and pasting text.</li> <li>Understand the difference between <code>x</code> and <code>X</code>, as well as <code>p</code> and <code>P</code>..</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2006%20Basic%20Clipboard/#lesson","title":"Lesson","text":"<p>Clipboard functionality in Vim revolves around cutting, copying, and pasting text, achieved using a combination of operators, motions, and dedicated clipboard commands.</p>"},{"location":"Weekly%20Tutorials/Week%2006%20Basic%20Clipboard/#cuttingcopying-commands","title":"Cutting/Copying Commands","text":"<p>Cutting/Changing (<code>c</code> and <code>d</code>)</p> <ul> <li><code>c</code>: Deletes text and enters Insert Mode, we covered this in previous lesson.</li> <li><code>d</code>: Deletes text without entering Insert Mode, we covered this in previous lesson.</li> </ul> <p>Deleting Characters (<code>x</code> and <code>X</code>)</p> <ul> <li><code>x</code>: Deletes the character under the cursor.</li> <li><code>X</code>: Deletes the character before the cursor.</li> </ul> <p>Yanking (Copying) (<code>y</code>, <code>Y</code>, <code>yy</code>)</p> <ul> <li><code>y</code>: Copies text defined by a motion or text object such as <code>w</code>, <code>iw</code>, <code>a{</code>, etc</li> <li><code>yy</code>: Copies the entire line.</li> <li> <p><code>Y</code>: Same as <code>yy</code> in default configurations. I prefer using <code>yy</code> as it follows the logic of <code>cc</code> and <code>dd</code></p> </li> <li> <p>All of the above command store the copied or deleted text in a register, making it available for pasting.</p> </li> </ul>"},{"location":"Weekly%20Tutorials/Week%2006%20Basic%20Clipboard/#pasting-commands","title":"Pasting Commands","text":"<p>Pasting (<code>p</code> and <code>P</code>)</p> <ul> <li><code>p</code>: Pastes text after the cursor (or below the current line in line-wise operations).</li> <li><code>P</code>: Pastes text before the cursor (or above the current line in line-wise operations).</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2006%20Basic%20Clipboard/#registers-overview","title":"Registers Overview","text":"<p>Every cut, copy, or delete action stores text in a register. By default, Vim uses the unnamed register (<code>\"</code>), which automatically saves the latest text for pasting. We\u2019ll explore registers in greater depth in a future lesson, so don't concern yourself with this for right now</p>"},{"location":"Weekly%20Tutorials/Week%2006%20Basic%20Clipboard/#note","title":"Note","text":"<p>By default, change commands (<code>c</code>) replace the current clipboard content. This can be frustrating when you want to enter Insert Mode with <code>c</code> and paste text, only to find that the clipboard was overwritten by the text you just deleted with the change command, instead of retaining the text you intended to paste. There are different solutions to handle this, which we will cover in future lessons:</p> <ul> <li>Plugins: Some plugins can modify the default behavior of <code>c</code> commands to preserve the clipboard content.</li> <li>Visual Mode: Instead of using <code>c</code> to replace text, you can select the text in Visual Mode and then paste directly, ensuring the clipboard content remains intact.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2006%20Basic%20Clipboard/#cheatsheet","title":"CheatSheet","text":"<p>Change single character</p> <ul> <li><code>x</code> : delete a character under the cursor</li> <li><code>X</code> : delete a character before the cursor </li> </ul> <p>Yanking:</p> <ul> <li><code>y</code> + motion: Yank text.</li> <li><code>yy</code> or <code>Y</code>: Yank the entire line.</li> </ul> <p>Pasting:</p> <ul> <li><code>p</code>: Paste after.</li> <li><code>P</code>: Paste before.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2006%20Basic%20Clipboard/#exercise","title":"Exercise","text":"<p>Use <code>d</code> combined with motions to delete specific text:</p> <ul> <li>Delete a word using <code>dw</code> and paste it using <code>p</code>.</li> </ul> <p>Practice yanking and pasting:</p> <ul> <li>Yank a single word with <code>yw</code> and paste it using <code>p</code>.</li> <li>Yank the entire line using <code>yy</code> and paste it above using <code>P</code>.</li> </ul> <p>Experiment with <code>x</code> and <code>X</code>:</p> <ul> <li>Use <code>x</code> to delete characters under the cursor.</li> <li>Use <code>X</code> to delete the character before the cursor.</li> <li>Whit this knowledge you can use <code>xp</code> to swap 2 characters.</li> </ul> <p>Practice pasting with <code>p</code> and <code>P</code>, and compare their behavior:</p> <ul> <li>Paste text after the cursor using <code>p</code>.</li> <li>Paste text before the cursor using <code>P</code>.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2006%20Basic%20Clipboard/#practice","title":"Practice","text":"<ul> <li>Change Commands: Remember by default change commands <code>d</code>, <code>c</code>, <code>x</code>, and <code>y</code> add text to the clipboard (unnamed register)</li> <li>Pasting: Practice pasting text with <code>p</code> and <code>P</code>. Pay attention to the positioning of the cursor and how the pasted text aligns relative to the cursor.</li> <li>Evaluate Efficiency: As you practice, reflect on whether your use of clipboard commands and motions minimizes unnecessary steps. Explore how commands like <code>yy</code> or <code>p</code> save time compared to manually selecting and inserting text.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2006%20Basic%20Clipboard/#further-reading","title":"Further Reading","text":""},{"location":"Weekly%20Tutorials/Week%2007%20Quick%20Find/","title":"Week 07 Quick Find","text":""},{"location":"Weekly%20Tutorials/Week%2007%20Quick%20Find/#goals","title":"Goals","text":"<p>By the end of this week, you will:</p> <ul> <li>Learn how to use the <code>*</code> and <code>#</code> commands for quick keyword searches.</li> <li>Understand how <code>n</code> and <code>N</code> help navigate through search results efficiently.</li> <li>Combine these commands to quickly locate and navigate instances of text.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2007%20Quick%20Find/#lesson","title":"Lesson","text":"<p>Quick Find commands in Vim allow you to search for keywords under the cursor or navigate to previous searches without typing. These commands are fast, efficient, and require minimal input.</p>"},{"location":"Weekly%20Tutorials/Week%2007%20Quick%20Find/#key-commands","title":"Key Commands","text":"<p>Search for Current Word (<code>*</code> and <code>#</code>)</p> <ul> <li><code>*</code>: Searches forward for the word under the cursor.     If your cursor is on the word <code>fox</code> in <code>The quick brown fox jumps</code>, pressing <code>*</code> highlights the next occurrence of <code>fox</code>.</li> <li><code>#</code>: Searches backward for the word under the cursor.     If your cursor is on the word <code>fox</code>, pressing <code>#</code> highlights the previous occurrence of <code>fox</code>.</li> </ul> <p>Navigate Search Results (<code>n</code> and <code>N</code>)</p> <ul> <li><code>n</code>: Moves to the next search result in the direction of the last search.     After pressing <code>*</code> to search forward, <code>n</code> continues moving to subsequent matches.</li> <li><code>N</code>: Moves to the previous search result, reversing the direction of the last search.     If you searched forward with <code>*</code>, pressing <code>N</code> moves to the previous match instead.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2007%20Quick%20Find/#combining-quick-find-commands","title":"Combining Quick Find Commands","text":"<ul> <li>Use <code>*</code> or <code>#</code> to initiate the search and locate the first occurrence of the word.</li> <li>Use <code>n</code> to continue in the same direction or <code>N</code> to reverse direction through matches.</li> <li>These commands work seamlessly within the current file, making it easy to navigate repetitive patterns.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2007%20Quick%20Find/#cheatsheet","title":"CheatSheet","text":"<p>Search Commands:</p> <ul> <li><code>*</code>: Search forward for the word under the cursor.</li> <li><code>#</code>: Search backward for the word under the cursor.</li> </ul> <p>Navigation Commands:</p> <ul> <li><code>n</code>: Move to the next match in the direction of the last search.</li> <li><code>N</code>: Move to the previous match in the opposite direction.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2007%20Quick%20Find/#exercises","title":"Exercises","text":"<p>Practice locating words:</p> <ul> <li>Place the cursor on a word and press <code>*</code> to search forward for all occurrences.</li> <li>Use <code>#</code> to search backward for the same word.</li> </ul> <p>Navigate matches:</p> <ul> <li>After searching with <code>*</code>, use <code>n</code> to jump through matches.</li> <li>Press <code>N</code> to reverse direction and move to previous matches.</li> </ul> <p>Test your workflow:</p> <ul> <li>In a block of text with repeated words, use <code>*</code> or <code>#</code> to find a word and combine it with <code>n</code> and <code>N</code> to explore all instances of the word efficiently.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2007%20Quick%20Find/#practice","title":"Practice","text":"<ul> <li>Initiating Searches: Focus on using <code>*</code> and <code>#</code> to quickly search for a word without typing. Get used to how they behave relative to the cursor position.</li> <li>Navigating Search Results: Practice switching directions with <code>n</code> and <code>N</code>. Pay attention to how they follow or reverse the direction of the initial search.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2007%20Quick%20Find/#further-reading","title":"Further Reading","text":""},{"location":"Weekly%20Tutorials/Week%2008%20Navigation%20Line/","title":"Week 08 Navigation Line","text":""},{"location":"Weekly%20Tutorials/Week%2008%20Navigation%20Line/#goals","title":"Goals","text":"<p>By the end of this week, you will:</p> <ul> <li>Understand how to navigate within a line efficiently using <code>0</code>, <code>^</code>, <code>$</code>, and <code>g_</code>.</li> <li>Learn to move between lines using <code>+</code> and <code>-</code>.</li> <li>Combine these commands with motions and operators for quick and precise text manipulation.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2008%20Navigation%20Line/#lesson","title":"Lesson","text":"<p>Vim provides line navigation commands that allow you to move to specific parts of a line or jump to the start or end. These commands are efficient and work seamlessly with operators like <code>d</code>, <code>y</code>, and <code>c</code>.</p>"},{"location":"Weekly%20Tutorials/Week%2008%20Navigation%20Line/#key-commands","title":"Key Commands","text":"<p>Within a Line</p> <ul> <li><code>0</code>: Move to the beginning of the line.     In the text <code>The quick brown fox</code>, pressing <code>0</code> moves the cursor to the <code>T</code>.</li> <li><code>^</code>: Move to the first non-whitespace character of the line.     For the line <code>The quick brown fox</code>, pressing <code>^</code> moves the cursor to the <code>T</code> after the spaces.</li> <li><code>$</code>: Move to the end of the line.     In the text <code>The quick brown fox</code>, pressing <code>$</code> moves the cursor to the <code>x</code>.</li> <li><code>g_</code>: Move to the last non-whitespace character of the line.     In the line <code>The quick brown fox</code> , pressing <code>g_</code> moves the cursor to the <code>x</code>, ignoring trailing spaces.</li> <li><code>|</code> : TODO</li> </ul> <p>Between Lines</p> <ul> <li><code>+</code>: Move to the first non-whitespace character of the next line.     If on <code>The quick brown fox</code>, pressing <code>+</code> moves the cursor to the start of the next line.</li> <li><code>-</code>: Move to the first non-whitespace character of the previous line.     If on <code>jumps over the lazy dog</code>, pressing <code>-</code> moves the cursor to the start of the previous line.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2008%20Navigation%20Line/#cheatsheet","title":"CheatSheet","text":"<p>Within the Line:</p> <ul> <li><code>0</code>: Start of the line.</li> <li><code>^</code>: First non-whitespace character of the line.</li> <li><code>$</code>: End of the line.</li> <li><code>g_</code>: Last non-whitespace character of the line.</li> </ul> <p>Between Lines:</p> <ul> <li><code>+</code>: First non-whitespace character of the next line.</li> <li><code>-</code>: First non-whitespace character of the previous line.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2008%20Navigation%20Line/#exercises","title":"Exercises","text":"<p>Practice moving within a line:</p> <ul> <li>Use <code>0</code> to jump to the beginning of lines.</li> <li>Use <code>^</code> to skip leading whitespace and move to the first word.</li> <li>Use <code>$</code> to quickly jump to the end of lines.</li> <li>Use <code>g_</code> to navigate to the last character of lines, ignoring trailing spaces.</li> </ul> <p>Combine navigation between lines:</p> <ul> <li>Use <code>+</code> and <code>-</code> to move between lines and position the cursor at the first word of each line.</li> </ul> <p>Test combining with motions:</p> <ul> <li>Delete from the beginning of the line to the first word with <code>d^</code>.</li> <li>Yank from the current position to the end of the line with <code>y$</code>.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2008%20Navigation%20Line/#practice","title":"Practice","text":"<ul> <li>Line Navigation: Focus on using <code>0</code>, <code>^</code>, <code>$</code>, and <code>g_</code> for precise cursor placement. Pay attention to how they behave in lines with varying amounts of whitespace.</li> <li>Advanced Line Movement: Practice moving between lines with <code>+</code> and <code>-</code>. Reflect on how these commands can simplify line-to-line navigation, especially in multi-line blocks.</li> <li>Efficiency Evaluation: Combine these commands with operators like <code>d</code> or <code>y</code> and evaluate whether you\u2019re minimizing cursor movements.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2008%20Navigation%20Line/#further-reading","title":"Further Reading","text":""},{"location":"Weekly%20Tutorials/Week%2009%20Navigation%20FIle/","title":"Week 09 Navigation FIle","text":""},{"location":"Weekly%20Tutorials/Week%2009%20Navigation%20FIle/#goals","title":"Goals","text":"<p>By the end of this week, you should:</p> <ul> <li>Know how to navigate efficiently within a file using commands like <code>gg</code>, <code>G</code>, and <code>:line_number</code>.</li> <li>Understand how to jump to a specific percentage of the file with motions like <code>5%</code>.</li> <li>Combine file navigation motions with operators.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2009%20Navigation%20FIle/#lesson","title":"Lesson","text":"<p>File navigation motions allow you to jump to specific locations in a file without scrolling. These commands make it easy to work in large files by positioning the cursor precisely.</p>"},{"location":"Weekly%20Tutorials/Week%2009%20Navigation%20FIle/#motions","title":"Motions","text":"<p>Start and End of the File</p> <ul> <li><code>gg</code>: Jump to the beginning of the file. In any position within the file, pressing <code>gg</code> moves the cursor to the first line at the start.</li> <li><code>G</code>: Jump to the end of the file. In any position within the file, pressing <code>G</code> moves the cursor to the last line.</li> </ul> <p>Specific Line Numbers</p> <ul> <li><code>10gg</code> or <code>10G</code>: Jump to line 10. Pressing <code>10gg</code> <code>10G</code> places the cursor at the beginning of line 10.</li> <li><code>:10</code>: Jump to line 10 (Command-line mode). Type <code>:10</code> and press Enter to move the cursor to line 10.</li> </ul> <p>Jump to a Percentage</p> <ul> <li><code>5%</code>: Jump to 5% of the way through the file.<ul> <li>Example: In a file with 100 lines, pressing <code>5%</code> places the cursor on line 5.</li> </ul> </li> </ul>"},{"location":"Weekly%20Tutorials/Week%2009%20Navigation%20FIle/#cheatsheet","title":"CheatSheet","text":"<ul> <li> <p>File Navigation:</p> <ul> <li><code>gg</code>: Jump to the start of the file.</li> <li><code>G</code>: Jump to the end of the file.</li> <li><code>[line_number]gg</code> <code>[line_number]G</code> <code>:[line_number]</code>: Jump to the specified line.</li> <li><code>[number]%</code>: Jump to the specified percentage of the file.</li> </ul> </li> </ul>"},{"location":"Weekly%20Tutorials/Week%2009%20Navigation%20FIle/#exercises","title":"Exercises","text":"<ol> <li> <p>Navigate to the start and end of the file:</p> <ul> <li>Use <code>gg</code> to move to the beginning of the file.</li> <li>Use <code>G</code> to move to the end of the file.</li> </ul> </li> <li> <p>Practice jumping to specific lines:</p> <ul> <li>Use <code>10gg</code>, <code>10G</code> or <code>:10</code> to navigate to line 10.</li> <li>Test with other line numbers in the file.</li> <li>Check which option you prefer the best.</li> </ul> </li> <li> <p>Explore percentage navigation:</p> <ul> <li>Experiment with percentage navigation.</li> </ul> </li> </ol>"},{"location":"Weekly%20Tutorials/Week%2009%20Navigation%20FIle/#practice","title":"Practice","text":"<ul> <li>File Start and End: Focus on using <code>gg</code> and <code>G</code> to quickly reach the top and bottom of the file. Reflect on how these motions minimize scrolling.</li> <li>Line-Specific Navigation: Practice jumping to specific lines using <code>[number]G</code> and <code>:line_number</code>. Pay attention to how these motions save time compared to scrolling manually.</li> <li>Percentage-Based Movement: Use <code>[number]%</code> to estimate positions in the file and navigate efficiently. Practice different percentages to get comfortable with this motion.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2009%20Navigation%20FIle/#further-reading","title":"Further Reading","text":""},{"location":"Weekly%20Tutorials/Week%2011%20Navigation%20Screen/","title":"Week 11 Navigation Screen","text":""},{"location":"Weekly%20Tutorials/Week%2011%20Navigation%20Screen/#goals","title":"Goals","text":"<p>By the end of this week, you will:</p> <ul> <li>Learn how to navigate within the visible screen using <code>H</code>, <code>M</code>, and <code>L</code>.</li> <li>Understand how to center or reposition the cursor on the screen with <code>zz</code>, <code>zt</code>, and <code>zb</code>.</li> <li>Combine these commands with other motions and operators for efficient screen-level navigation and editing.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2011%20Navigation%20Screen/#lesson","title":"Lesson","text":"<p>Screen navigation commands in Vim allow you to move quickly to specific positions within the visible window. These commands are particularly useful for focusing on specific lines or repositioning the cursor without scrolling manually.</p>"},{"location":"Weekly%20Tutorials/Week%2011%20Navigation%20Screen/#specific-screen-positions","title":"Specific Screen Positions","text":"<ul> <li><code>H</code>: High : places the cursor at the first visible line of the screen. You can use count before the motion <code>10H</code> to place the cursor 10 lines from High</li> <li><code>M</code>: Middle : places the cursor at the middle visible line of the screen.</li> <li><code>L</code>: Low : places the cursor at the last visible line of the screen. You can use count before the motion <code>10L</code> to place the cursor 10 lines from Low</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2011%20Navigation%20Screen/#reposition-the-current-line","title":"Reposition the Current Line","text":"<ul> <li><code>zz</code>: Zenter : scrolls the file so that the line with the cursor is positioned in the center of the screen.</li> <li><code>zt</code>: ZTop : scrolls the file so that the line with the cursor is at the top of the screen.</li> <li><code>zb</code>: ZBottom : scrolls the file so that the line with the cursor is at the bottom of the screen.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2011%20Navigation%20Screen/#cheatsheet","title":"CheatSheet","text":"<p>Screen Position:</p> <ul> <li><code>[count]H</code>: Jump to the top of the screen.</li> <li><code>M</code>: Jump to the middle of the screen.</li> <li><code>[count]L</code>: Jump to the bottom of the screen.</li> </ul> <p>Reposition Cursor:</p> <ul> <li><code>zz</code>: Center the current line.</li> <li><code>zt</code>: Move the current line to the top.</li> <li><code>zb</code>: Move the current line to the bottom.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2011%20Navigation%20Screen/#exercises","title":"Exercises","text":"<ol> <li> <p>Navigate to visible positions:</p> <ul> <li>Use <code>H</code>, <code>M</code>, and <code>L</code> to quickly move the cursor to the top, middle, and bottom of the visible screen.</li> <li>Combine <code>H</code> and <code>L</code> with <code>[count]</code> to jump to specific line</li> </ul> </li> <li> <p>Reposition the current line:</p> <ul> <li>Use <code>zz</code> to center the line with the cursor.</li> <li>Use <code>zt</code> and <code>zb</code> to move the current line to the top and bottom of the screen.</li> </ul> </li> <li> <p>Test combinations:</p> <ul> <li>Use <code>H</code> to jump to the top of the screen, then reposition the cursor line with <code>zz</code>.</li> </ul> </li> </ol>"},{"location":"Weekly%20Tutorials/Week%2011%20Navigation%20Screen/#practice","title":"Practice","text":"<ul> <li>Screen Positioning: Focus on using <code>H</code>, <code>M</code>, and <code>L</code> to jump between specific screen positions. Reflect on how they reduce manual scrolling and improve navigation efficiency.</li> <li>Repositioning Lines: Practice using <code>zz</code>, <code>zt</code>, and <code>zb</code> to reposition the line with the cursor. Pay attention to how each command adjusts the visible screen and makes focused editing easier.</li> <li>Workflow Efficiency: Experiment with combining screen navigation commands with motions and operators. Evaluate how these commands can streamline your workflow in large or complex files.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2011%20Navigation%20Screen/#further-reading","title":"Further Reading","text":""},{"location":"Weekly%20Tutorials/Week%2012%20Navigation%20Code/","title":"Week 12 Navigation Code","text":"<p>\u26a0\ufe0f work in progress</p>"},{"location":"Weekly%20Tutorials/Week%2012%20Navigation%20Code/#goals","title":"Goals","text":"<p>By the end of this week, you will:</p> <ul> <li>Understand how to navigate efficiently through code structures using matching brackets, function definitions, and comment blocks.</li> <li>Learn to combine these motions with operators for precise and efficient editing in code.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2012%20Navigation%20Code/#lesson","title":"Lesson","text":"<p>Code navigation in Vim enables you to jump between matching brackets, function definitions, and structural elements like comments. These commands are essential for working efficiently in large codebases or structured files.</p>"},{"location":"Weekly%20Tutorials/Week%2012%20Navigation%20Code/#key-commands","title":"Key Commands","text":"<ol> <li> <p>Bracket Matching</p> <ul> <li><code>%</code>: Jump between matching brackets, parentheses, or braces.<ul> <li>Example: In <code>(foo(bar))</code>, pressing <code>%</code> moves between the <code>(</code> and <code>)</code> or <code>{</code> and <code>}</code>.</li> </ul> </li> <li> <p>Moving to Function or Method Start</p> </li> <li> <p><code>]m</code>: Move to the start of the next method or function.</p> <ul> <li>Example: In a file with multiple functions, pressing <code>]m</code> jumps to the beginning of the next function.</li> </ul> </li> <li><code>[m</code>: Move to the start of the previous method or function.<ul> <li>Example: Pressing <code>[m</code> jumps to the beginning of the previous function.</li> </ul> </li> <li> <p>Moving to Function or Method End</p> </li> <li> <p><code>]M</code>: Move to the end of the next method or function.</p> <ul> <li>Example: In a file with multiple functions, pressing <code>]M</code> jumps to the end of the next function.</li> </ul> </li> <li><code>[M</code>: Move to the end of the previous method or function.<ul> <li>Example: Pressing <code>[M</code> jumps to the end of the previous function.</li> </ul> </li> <li> <p>Code Block Navigation</p> </li> <li> <p><code>])</code>: Jump to the next unmatched <code>)</code>.</p> </li> <li><code>[(</code>: Jump to the previous unmatched <code>(</code>.</li> <li><code>]}</code>: Jump to the next unmatched <code>}</code>.</li> <li><code>[{</code>: Jump to the previous unmatched <code>{</code>.</li> <li> <p>Comment Navigation</p> </li> <li> <p><code>[/*</code>: Move to the start of the previous comment block.</p> </li> <li><code>]/*</code>: Move to the start of the next comment block.</li> <li> <p>Preprocessor Directive Navigation</p> </li> <li> <p><code>[#</code>: Move to the previous preprocessor directive.</p> </li> <li><code>]#</code>: Move to the next preprocessor directive.</li> </ul> </li> </ol>"},{"location":"Weekly%20Tutorials/Week%2012%20Navigation%20Code/#cheatsheet","title":"CheatSheet","text":"<ul> <li>Bracket Matching:<ul> <li><code>%</code>: Jump between matching brackets.</li> </ul> </li> <li>Function Navigation:<ul> <li><code>]m</code>: Next method or function start.</li> <li><code>[m</code>: Previous method or function start.</li> <li><code>]M</code>: Next method or function end.</li> <li><code>[M</code>: Previous method or function end.</li> </ul> </li> <li>Block Navigation:<ul> <li><code>])</code>: Next unmatched <code>)</code>.</li> <li><code>[(</code>: Previous unmatched <code>(</code>.</li> <li><code>]}</code>: Next unmatched <code>}</code>.</li> <li><code>[{</code>: Previous unmatched <code>{</code>.</li> </ul> </li> <li>Comment Navigation:<ul> <li><code>[/*</code>: Previous comment block.</li> <li><code>]/*</code>: Next comment block.</li> </ul> </li> <li>Preprocessor Directive Navigation:<ul> <li>`[#: Previous preprocessor directive.</li> <li><code>]#</code>: Next preprocessor directive.</li> </ul> </li> </ul>"},{"location":"Weekly%20Tutorials/Week%2012%20Navigation%20Code/#exercises","title":"Exercises","text":"<ol> <li> <p>Practice bracket matching:</p> <ul> <li>Use <code>%</code> to jump between matching brackets or braces in nested structures.</li> <li> <p>Explore function navigation:</p> </li> <li> <p>Use <code>]m</code> and <code>[m</code> to navigate to the start of functions.</p> </li> <li>Use <code>]M</code> and <code>[M</code> to navigate to the end of functions.</li> <li> <p>Test block navigation:</p> </li> <li> <p>Use <code>])</code> and <code>[(</code> to jump to unmatched parentheses.</p> </li> <li>Use <code>]}</code> and <code>[{</code> to navigate unmatched braces.</li> <li> <p>Navigate comments and preprocessor directives:</p> </li> <li> <p>Use <code>[/*</code> and <code>]/*</code> to jump between comment blocks.</p> </li> <li>Use <code>[#</code> and <code>]#</code> to navigate preprocessor directives in code.</li> </ul> </li> </ol>"},{"location":"Weekly%20Tutorials/Week%2012%20Navigation%20Code/#practice","title":"Practice","text":"<ul> <li>Bracket Matching: Focus on using <code>%</code> to navigate between matching brackets, parentheses, or braces in nested code. Reflect on how it simplifies navigating complex structures.</li> <li>Function and Block Navigation: Practice moving through functions and code blocks using <code>]m</code>, <code>[m</code>, <code>])</code>, and <code>[{</code>. Pay attention to how these motions help in navigating large codebases.</li> <li>Efficient Comment Navigation: Use <code>[/*</code> and <code>]/*</code> to jump between comment blocks. Reflect on how this can save time while reviewing documentation or code comments.</li> <li>Evaluate Workflow: Combine these motions with operators like <code>d</code> or <code>y</code> to manipulate or extract code sections efficiently.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2013%20Text%20Object%20Motions/","title":"Week 13 Text Object Motions","text":"<p>\u26a0\ufe0f work in progress</p>"},{"location":"Weekly%20Tutorials/Week%2013%20Text%20Object%20Motions/#goals","title":"Goals","text":"<p>By the end of this week, you will:</p> <ul> <li>Understand how to use text object motions to navigate through sentences, paragraphs, and blocks of text.</li> <li>Learn how to move efficiently between parentheses and braces using motions like <code>(</code>, <code>)</code>, <code>{</code>, and <code>}</code>.</li> <li>Navigate structured blocks of text using motions like <code>]]</code>, <code>][</code>, <code>[[</code>, and <code>[]</code>.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2013%20Text%20Object%20Motions/#lesson","title":"Lesson","text":"<p>Text object motions in Vim allow you to navigate structured and logical sections of text, such as sentences, paragraphs, and blocks. These motions are indispensable for working efficiently in code or formatted text files.</p>"},{"location":"Weekly%20Tutorials/Week%2013%20Text%20Object%20Motions/#key-commands","title":"Key Commands","text":"<ol> <li> <p>Sentence Navigation</p> <ul> <li><code>(</code>: Move to the beginning of the current or previous sentence.<ul> <li>Example: In <code>Hello. |This is a sentence.</code>, pressing <code>(</code> moves the cursor to <code>Hello.</code>.</li> </ul> </li> <li><code>)</code>: Move to the beginning of the next sentence.<ul> <li>Example: In <code>Hello. |This is a sentence.</code>, pressing <code>)</code> moves the cursor to <code>This is a sentence.</code>.</li> </ul> </li> <li> <p>Paragraph Navigation</p> </li> <li> <p><code>{</code>: Move to the beginning of the current or previous paragraph.</p> <ul> <li> <p>Example: In the text:</p> <p>text</p> <p>Copy code</p> <p><code>Paragraph one.  Paragraph |two.</code></p> <p>Pressing <code>{</code> moves the cursor to <code>Paragraph one.</code>.     - <code>}</code>: Move to the beginning of the next paragraph.         - Example: In the same text, pressing <code>}</code> moves the cursor to the line after <code>Paragraph two.</code>. 3. Block Navigation</p> </li> </ul> </li> <li> <p><code>[[</code>: Move to the beginning of the current or previous block.</p> <ul> <li> <p>Example: In a code block:</p> <p>text</p> <p>Copy code</p> <p><code>if (condition) {     // |Code block }</code></p> <p>Pressing <code>[[</code> moves to <code>if (condition) {</code>.     - <code>]]</code>: Move to the beginning of the next block.</p> </li> <li> <p>Example: In the same code block, pressing <code>]]</code> moves to the next block's start.</p> <ul> <li><code>[]</code>: Move to the beginning of the previous unmatched <code>[</code> or <code>{</code>.</li> </ul> </li> <li> <p>Example: From inside a nested block, <code>[]</code> moves to the matching outer block's start.</p> <ul> <li><code>][</code>: Move to the beginning of the next unmatched <code>[</code> or <code>{</code>.</li> </ul> </li> <li> <p>Example: Inside a deeply nested block, <code>][</code> jumps to the next outer block.</p> </li> </ul> </li> </ul> </li> </ol>"},{"location":"Weekly%20Tutorials/Week%2013%20Text%20Object%20Motions/#cheatsheet","title":"CheatSheet","text":"<ul> <li>Sentence Navigation:<ul> <li><code>(</code>: Move to the start of the current or previous sentence.</li> <li><code>)</code>: Move to the start of the next sentence.</li> </ul> </li> <li>Paragraph Navigation:<ul> <li><code>{</code>: Move to the start of the current or previous paragraph.</li> <li><code>}</code>: Move to the start of the next paragraph.</li> </ul> </li> <li>Block Navigation:<ul> <li><code>[[</code>: Move to the start of the current or previous block.</li> <li><code>]]</code>: Move to the start of the next block.</li> <li><code>[]</code>: Move to the previous unmatched <code>[</code> or <code>{</code>.</li> <li><code>][</code>: Move to the next unmatched <code>[</code> or <code>{</code>.</li> </ul> </li> </ul>"},{"location":"Weekly%20Tutorials/Week%2013%20Text%20Object%20Motions/#exercises","title":"Exercises","text":"<ol> <li> <p>Practice sentence navigation:</p> <ul> <li>Use <code>(</code> to move to the start of each sentence in a paragraph.</li> <li>Use <code>)</code> to navigate to the next sentence.</li> <li> <p>Explore paragraph motions:</p> </li> <li> <p>Use <code>{</code> to move back through paragraphs in a multi-paragraph text.</p> </li> <li>Use <code>}</code> to move forward through paragraphs.</li> <li> <p>Work with blocks:</p> </li> <li> <p>In a code file, use <code>[[</code> and <code>]]</code> to navigate to different blocks of code.</p> </li> <li>Use <code>[]</code> and <code>][</code> to jump between nested or unmatched brackets.</li> </ul> </li> </ol>"},{"location":"Weekly%20Tutorials/Week%2013%20Text%20Object%20Motions/#practice","title":"Practice","text":"<ul> <li>Sentence and Paragraph Navigation: Focus on moving efficiently through structured text using <code>(</code>, <code>)</code>, <code>{</code>, and <code>}</code>. Evaluate how these motions simplify jumping between sentences and paragraphs without manual scrolling.</li> <li>Block Navigation: Practice navigating through structured blocks of text or code using <code>[[</code>, <code>]]</code>, <code>[]</code>, and <code>][</code>. Reflect on how these commands reduce the effort of jumping between nested sections.</li> <li>Workflow Efficiency: Combine text object motions with operators like <code>d</code> or <code>y</code> to delete or yank entire sentences, paragraphs, or blocks. Experiment with different motions to optimize your workflow.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2013%20Text%20Object%20Motions/#further-reading","title":"Further Reading","text":""},{"location":"Weekly%20Tutorials/Week%2014%20Neovim%20Config%20and%20Lazy%20Plugin%20Manager/","title":"Week 14 Neovim Config and Lazy Plugin Manager","text":"<p>\u26a0\ufe0f work in progress</p>"},{"location":"Weekly%20Tutorials/Week%2014%20Neovim%20Config%20and%20Lazy%20Plugin%20Manager/#goals","title":"Goals","text":"<p>By the end of this lesson, you will:</p> <ul> <li>Set up a basic Neovim configuration using <code>init.lua</code>.</li> <li>Create modular configuration files for options, keymaps, and plugin management.</li> <li>Install and configure lazy.nvim as your plugin manager.</li> <li>Understand how to structure a Neovim setup.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2014%20Neovim%20Config%20and%20Lazy%20Plugin%20Manager/#lesson","title":"Lesson","text":""},{"location":"Weekly%20Tutorials/Week%2014%20Neovim%20Config%20and%20Lazy%20Plugin%20Manager/#create-init-file","title":"Create Init File","text":"<p>The <code>init.lua</code> file is the entry point for Neovim's Lua-based configuration. We'll start by creating this file in the Neovim configuration directory.</p> <ul> <li>Navigate to Neovim's configuration directory:<ul> <li>On Linux/MacOS: <code>~/.config/nvim/</code></li> <li>On Windows: <code>C:\\Users\\&lt;YourUsername&gt;\\AppData\\Local\\nvim\\</code></li> </ul> </li> <li>Create the <code>init.lua</code> file.</li> <li>Add the following config for the leader keys, we will cover this in future lessons:     <pre><code>vim.g.mapleader = \" \"         -- Sets the global leader key, used for creating custom mappings. Default: `space`.\nvim.g.maplocalleader = \"\\\\\"   -- Sets the local leader key, often used for buffer-specific mappings. Default: `\\`.\n</code></pre></li> </ul>"},{"location":"Weekly%20Tutorials/Week%2014%20Neovim%20Config%20and%20Lazy%20Plugin%20Manager/#configure-options","title":"Configure Options","text":"<p>To keep your configuration modular and easier to maintain, we'll set options as a separate file.</p> <ul> <li>Create the directory <code>lua/config/</code> inside your nvim configuration directory.</li> <li>Inside this directory, create a file named <code>option.lua</code>.</li> <li>Add the following content:     <pre><code>vim.opt.number = true           -- Show line numbers in the gutter\nvim.opt.relativenumber = true   -- Show relative line numbers for easier navigation\nvim.opt.cursorline = true       -- Highlight the line where the cursor is located, improving visibility\n</code></pre></li> <li>In <code>init.lua</code>, require this file:     <pre><code>require(\"config.option\")\n</code></pre></li> <li>Restart neovim extention using the command palette.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2014%20Neovim%20Config%20and%20Lazy%20Plugin%20Manager/#create-keymaps-file","title":"Create Keymaps File","text":"<p>This file will store your custom key mappings.</p> <ul> <li>Create a file named <code>keymaps.lua</code> inside the <code>lua/config/</code> directory.</li> <li>Leave it empty for now; we\u2019ll populate it in future lessons.</li> <li>Require this file in <code>init.lua</code>:     <pre><code>require(\"config.keymaps\")\n</code></pre></li> </ul>"},{"location":"Weekly%20Tutorials/Week%2014%20Neovim%20Config%20and%20Lazy%20Plugin%20Manager/#install-lazynvim","title":"Install Lazy.nvim","text":"<p>lazy.nvim is a powerful and lightweight plugin manager for Neovim.</p> <ul> <li>reate a file named <code>lazy.lua</code> inside the <code>lua/config/</code> directory.</li> <li>Add the following bootstrap code:     <pre><code>local lazypath = vim.fn.stdpath(\"data\") .. \"/lazy/lazy.nvim\"\nif not (vim.uv or vim.loop).fs_stat(lazypath) then\n  local lazyrepo = \"https://github.com/folke/lazy.nvim.git\"\n  local out = vim.fn.system({ \"git\", \"clone\", \"--filter=blob:none\", \"--branch=stable\", lazyrepo, lazypath })\n  if vim.v.shell_error ~= 0 then\n    vim.api.nvim_echo({\n      { \"Failed to clone lazy.nvim:\\n\", \"ErrorMsg\" },\n      { out, \"WarningMsg\" },\n      { \"\\nPress any key to exit...\" },\n    }, true, {})\n    vim.fn.getchar()\n    os.exit(1)\n  end\nend\nvim.opt.rtp:prepend(lazypath)\n\n-- Setup lazy.nvim\nrequire(\"lazy\").setup({\n  spec = {\n    { import = \"plugins\" },\n    { import = \"plugins_non_vscode\", cond = (function() return not vim.g.vscode end) },\n  },\n  install = { colorscheme = { 'tokyonight' } },\n  checker = { enabled = true },\n})\n</code></pre></li> <li>Require this file in <code>init.lua</code>:     <pre><code>require(\"config.lazy\")\n</code></pre></li> </ul>"},{"location":"Weekly%20Tutorials/Week%2014%20Neovim%20Config%20and%20Lazy%20Plugin%20Manager/#final-init-file","title":"Final Init File","text":"<p>At the end your init file should look similar to this: <pre><code>vim.g.mapleader = \" \"         -- Sets the global leader key, used for creating custom mappings. Default: `space`.\nvim.g.maplocalleader = \"\\\\\"   -- Sets the local leader key, often used for buffer-specific mappings. Default: `\\`.\n\nrequire(\"config.lazy\")\nrequire(\"config.options\")\nrequire(\"config.keymaps\")\n</code></pre></p>"},{"location":"Weekly%20Tutorials/Week%2014%20Neovim%20Config%20and%20Lazy%20Plugin%20Manager/#cheatsheet","title":"CheatSheet","text":"<p>Plugin Lazy.nvim: - A plugin manager for Neovim</p>"},{"location":"Weekly%20Tutorials/Week%2014%20Neovim%20Config%20and%20Lazy%20Plugin%20Manager/#practice","title":"Practice","text":"<ul> <li>Lazy.nvim: Test the lazy.nvim bootstrap code and reflect on how it simplifies plugin management compared to manual installation.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2014%20Neovim%20Config%20and%20Lazy%20Plugin%20Manager/#further-reading","title":"Further Reading","text":"<ul> <li>Neovim Lua Configuration: Official guide for Lua-based configurations.</li> <li>lazy.nvim Documentation: Learn more about the features and setup of lazy.nvim.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2014.1%20Plugin%20Mini%20Surround/","title":"Week 14.1 Plugin Mini Surround","text":"<p>\u26a0\ufe0f work in progress</p>"},{"location":"Weekly%20Tutorials/Week%2014.1%20Plugin%20Mini%20Surround/#goals","title":"Goals","text":"<p>By the end of this week, you will:</p> <ul> <li>Install and configure the Mini Surround plugin using Lazy.nvim.</li> <li>Learn how to use Mini Surround commands for adding, deleting, finding, highlighting, and replacing surrounding characters or blocks.</li> <li>Understand the customization options provided by Mini Surround and their mappings.</li> <li>Explore similar plugins for surrounding functionality in Neovim.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2014.1%20Plugin%20Mini%20Surround/#lesson","title":"Lesson","text":"<p>Let's start with out first plugin, the Mini Surround plugin allows you to manipulate surrounding characters (e.g., parentheses, brackets, quotes, tags) efficiently. It offers highly customizable mappings and functionality for adding, deleting, finding, and replacing surroundings.</p>"},{"location":"Weekly%20Tutorials/Week%2014.1%20Plugin%20Mini%20Surround/#installation-with-lazynvim","title":"Installation with Lazy.nvim","text":"<ul> <li>Create the file <code>lua/config/plugins/mini.surround.lua</code>.</li> <li>Add the following content to configure and install Mini Surround:   <pre><code>return {\n    \"echasnovski/mini.surround\",\n\n    opts = {\n        highlight_duration = 5000, -- keep the highlight for 5 secods before clearing\n        mappings = {\n            add = 'sa', -- Add surrounding\n            delete = 'sd', -- Delete surrounding\n            replace = 'sr', -- Replace surrounding\n\n            find = 'sf', -- Find surrounding\n            find_left = 'sF', -- Find surrounding (to the left)\n            highlight = 'sh', -- Highlight surrounding\n            update_n_lines = 'sn', -- Update `n_lines`\n\n            suffix_last = 'l', -- Suffix to search with \"prev\" method\n            suffix_next = 'n', -- Suffix to search with \"next\" method\n        },\n        search_method = 'cover_or_nearest',\n    }\n}\n</code></pre></li> <li>Save the file. Lazy.nvim will automatically detect and load this plugin during its setup.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2014.1%20Plugin%20Mini%20Surround/#key-commands-and-operators","title":"Key Commands and Operators","text":"<p>Adding Surroundings (<code>sa</code>)</p> <ul> <li><code>sa</code> : Surround Add : Add a surrounding to the selected text in Normal or Visual Mode.<ul> <li>Example: Select <code>word</code> and use <code>sa</code> followed by <code>(</code> to make <code>(word)</code>.</li> </ul> </li> </ul> <p>Deleting Surroundings (<code>sd</code>)</p> <ul> <li><code>sd</code>: Delete the surrounding characters around the cursor.<ul> <li>Example: From <code>(word)</code>, place the cursor inside and use <code>sd</code> to make <code>word</code>.</li> </ul> </li> </ul> <p>Replacing Surroundings (<code>sr</code>)</p> <ul> <li><code>sr</code>: Replace the current surrounding with a new one.<ul> <li>Example: Replace <code>\"word\"</code> with <code>[word]</code> by using <code>sr</code> followed by the target surrounding.</li> </ul> </li> </ul> <p>Highlighting Surroundings (<code>sh</code>)</p> <ul> <li><code>sh</code>: Highlight the surrounding characters around the cursor for easy visualization.</li> </ul> <pre><code>WORK IN PROGRESS\n\n**Finding Surroundings (`sf` and `sF`)**\n\n- `sf`: Find the nearest surrounding to the right of the cursor.\n- `sF`: Find the nearest surrounding to the left of the cursor.\n\n**Updating Lines (`sn`)**\n\n- `sn`: Update the number of lines used to detect surroundings.\n\n**Suffixes (`l` and `n`)**\n\n- `l`: Search using the \"last\" method for surroundings.\n- `n`: Search using the \"next\" method for surroundings.\n</code></pre>"},{"location":"Weekly%20Tutorials/Week%2014.1%20Plugin%20Mini%20Surround/#cheatsheet","title":"CheatSheet","text":"<ul> <li> <p>Commands:</p> <ul> <li><code>sa</code>: surround add</li> <li><code>sd</code>: surround delete</li> <li> <p><code>sr</code>: surround replace</p> </li> <li> <p><code>sh</code>: surround highlight</p> </li> <li><code>sf</code>: surround find right.</li> <li><code>sF</code>: surround find left.</li> <li><code>sn</code>: Update detection range for surroundings.</li> <li><code>l</code>: Search \"last\" surrounding.</li> <li><code>n</code>: Search \"next\" surrounding.</li> </ul> </li> </ul>"},{"location":"Weekly%20Tutorials/Week%2014.1%20Plugin%20Mini%20Surround/#exercises","title":"Exercises","text":"<p>Adding Surroundings:</p> <ul> <li>Add parentheses to the word <code>example</code> using <code>sa</code>.</li> <li>Add quotes to the sentence <code>this is a test</code>.</li> </ul> <p>Deleting Surroundings:</p> <ul> <li>Delete the parentheses in <code>(text)</code> using <code>sd</code>.</li> <li>Remove the quotes from <code>\"hello\"</code> using <code>sd</code>.</li> </ul> <p>Replacing Surroundings:</p> <ul> <li>Replace brackets <code>[content]</code> with curly braces <code>{content}</code> using <code>sr</code>.</li> </ul> <p>Exploring Highlighting and Finding:</p> <ul> <li>Use <code>sh</code> to highlight surroundings in a block of text.</li> <li>Use <code>sf</code> and <code>sF</code> to find surrounding characters in both directions.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2014.1%20Plugin%20Mini%20Surround/#practice","title":"Practice","text":"<ul> <li>Experiment with Surroundings: Focus on adding, deleting, and replacing surroundings efficiently. Pay attention to how different mappings streamline your workflow. Combine these with inner and around text objects</li> <li>Visualization: Use <code>sh</code> to highlight and better understand the scope of selected surroundings.</li> <li>Directional Searches: Practice using <code>sf</code>, <code>sF</code>, <code>l</code>, and <code>n</code> to navigate surroundings quickly in both directions.</li> </ul>"},{"location":"Weekly%20Tutorials/Week%2014.1%20Plugin%20Mini%20Surround/#further-reading","title":"Further Reading","text":"<ul> <li> <p>Mini Surround Plugin Documentation: Learn more about the plugin's functionality and customization.</p> </li> <li> <p>Similar Plugins:</p> <ul> <li>vim-surround: A classic plugin for managing surroundings in Vim.</li> <li>nvim-surround: A modern Lua-based alternative to vim-surround with additional features.</li> <li>machakann/vim-sandwich</li> </ul> </li> </ul>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/001-insert-a-capital/","title":"001 insert a capital","text":"<p>Output img/01/001-insert-a-capital.gif</p> <p>Source config.tape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/001-insert-a-capital/#prep","title":"Prep","text":"<p>Type \"ifoobar\" Escape Type \"Fo\"</p> <p>Show Sleep 1s</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/001-insert-a-capital/#recording","title":"Recording","text":"<p>Type \"Ahello\" Escape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/001-insert-a-capital/#end","title":"End","text":"<p>Sleep 1s</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/001-insert-a/","title":"001 insert a","text":"<p>Output img/01/001-insert-a.gif</p> <p>Source config.tape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/001-insert-a/#prep","title":"Prep","text":"<p>Type \"ifoobar\" Escape Type \"Fo\"</p> <p>Show Sleep 1s</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/001-insert-a/#recording","title":"Recording","text":"<p>Type \"ahello\" Escape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/001-insert-a/#end","title":"End","text":"<p>Sleep 1s</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/001-insert-i-capital/","title":"001 insert i capital","text":"<p>Output img/01/001-insert-i-capital.gif</p> <p>Source config.tape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/001-insert-i-capital/#prep","title":"Prep","text":"<p>Type \"ifoobar\" Escape Type \"Fo\"</p> <p>Show Sleep 1s</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/001-insert-i-capital/#recording","title":"Recording","text":"<p>Type \"Ihello\" Escape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/001-insert-i-capital/#end","title":"End","text":"<p>Sleep 1s</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/001-insert-i/","title":"001 insert i","text":"<p>Output img/01/001-insert-i.gif</p> <p>Source config.tape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/001-insert-i/#prep","title":"Prep","text":"<p>Type \"ifoobar\" Escape Type \"Fo\"</p> <p>Show Sleep 1s</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/001-insert-i/#recording","title":"Recording","text":"<p>Type \"ihello\" Escape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/001-insert-i/#end","title":"End","text":"<p>Sleep 1s</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/001-insert-o-capital/","title":"001 insert o capital","text":"<p>Output img/01/001-insert-o-capital.gif</p> <p>Source config.tape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/001-insert-o-capital/#prep","title":"Prep","text":"<p>Type \"ifoobar\" Escape Type \"Fo\"</p> <p>Show Sleep 1s</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/001-insert-o-capital/#recording","title":"Recording","text":"<p>Type \"Ohello\" Escape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/001-insert-o-capital/#end","title":"End","text":"<p>Sleep 1s</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/001-insert-o/","title":"001 insert o","text":"<p>Output img/01/001-insert-o.gif</p> <p>Source config.tape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/001-insert-o/#prep","title":"Prep","text":"<p>Type \"ifoobar\" Escape Type \"Fo\"</p> <p>Show Sleep 1s</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/001-insert-o/#recording","title":"Recording","text":"<p>Type \"ohello\" Escape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/001-insert-o/#end","title":"End","text":"<p>Sleep 1s</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-b-capital/","title":"002 word b capital","text":"<p>Output img/01/002-word-b-capital.gif</p> <p>Source config.tape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-b-capital/#prep","title":"Prep","text":"<p>Type \"iLorem ipsum dolor-sit amet, consectetur_adipiscing elit.\" Escape Type \"$\"</p> <p>Show Sleep 1s</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-b-capital/#recording","title":"Recording","text":"<p>Type@500ms \"B\" Type@500ms \"B\" Type@500ms \"B\" Type@500ms \"B\" Type@500ms \"B\"</p> <p>Escape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-b-capital/#end","title":"End","text":"<p>Sleep 1s</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-b/","title":"002 word b","text":"<p>Output img/01/002-word-b.gif</p> <p>Source config.tape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-b/#prep","title":"Prep","text":"<p>Type \"iLorem ipsum dolor-sit amet, consectetur_adipiscing elit.\" Escape Type \"$\"</p> <p>Show Sleep 1s</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-b/#recording","title":"Recording","text":"<p>Type@500ms \"b\" Type@500ms \"b\" Type@500ms \"b\" Type@500ms \"b\" Type@500ms \"b\" Type@500ms \"b\" Type@500ms \"b\" Type@500ms \"b\"</p> <p>Escape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-b/#end","title":"End","text":"<p>Sleep 1s</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-e-capital/","title":"002 word e capital","text":"<p>Output img/01/002-word-e-capital.gif</p> <p>Source config.tape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-e-capital/#prep","title":"Prep","text":"<p>Type \"iLorem ipsum dolor-sit amet, consectetur_adipiscing elit.\" Escape Type \"0\"</p> <p>Show Sleep 1s</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-e-capital/#recording","title":"Recording","text":"<p>Type@500ms \"E\" Type@500ms \"E\" Type@500ms \"E\" Type@500ms \"E\" Type@500ms \"E\"</p> <p>Escape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-e-capital/#end","title":"End","text":"<p>Sleep 1s</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-e/","title":"002 word e","text":"<p>Output img/01/002-word-e.gif</p> <p>Source config.tape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-e/#prep","title":"Prep","text":"<p>Type \"iLorem ipsum dolor-sit amet, consectetur_adipiscing elit.\" Escape Type \"0\"</p> <p>Show Sleep 1s</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-e/#recording","title":"Recording","text":"<p>Type@500ms \"e\" Type@500ms \"e\" Type@500ms \"e\" Type@500ms \"e\" Type@500ms \"e\" Type@500ms \"e\" Type@500ms \"e\" Type@500ms \"e\"</p> <p>Escape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-e/#end","title":"End","text":"<p>Sleep 1s</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-ge-capital/","title":"002 word ge capital","text":"<p>Output img/01/002-word-ge-capital.gif</p> <p>Source config.tape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-ge-capital/#prep","title":"Prep","text":"<p>Type \"iLorem ipsum dolor-sit amet, consectetur_adipiscing elit.\" Escape Type \"$\"</p> <p>Show Sleep 1s</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-ge-capital/#recording","title":"Recording","text":"<p>Type@500ms \"gE\" Type@500ms \"gE\" Type@500ms \"gE\" Type@500ms \"gE\" Type@500ms \"gE\"</p> <p>Escape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-ge-capital/#end","title":"End","text":"<p>Sleep 1s</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-ge/","title":"002 word ge","text":"<p>Output img/01/002-word-ge.gif</p> <p>Source config.tape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-ge/#prep","title":"Prep","text":"<p>Type \"iLorem ipsum dolor-sit amet, consectetur_adipiscing elit.\" Escape Type \"$\"</p> <p>Show Sleep 1s</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-ge/#recording","title":"Recording","text":"<p>Type@500ms \"ge\" Type@500ms \"ge\" Type@500ms \"ge\" Type@500ms \"ge\" Type@500ms \"ge\" Type@500ms \"ge\" Type@500ms \"ge\" Type@500ms \"ge\"</p> <p>Escape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-ge/#end","title":"End","text":"<p>Sleep 1s</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-w-capital/","title":"002 word w capital","text":"<p>Output img/01/002-word-w-capital.gif</p> <p>Source config.tape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-w-capital/#prep","title":"Prep","text":"<p>Type \"iLorem ipsum dolor-sit amet, consectetur_adipiscing elit.\" Escape Type \"0\"</p> <p>Show Sleep 1s</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-w-capital/#recording","title":"Recording","text":"<p>Type@500ms \"W\" Type@500ms \"W\" Type@500ms \"W\" Type@500ms \"W\" Type@500ms \"W\"</p> <p>Escape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-w-capital/#end","title":"End","text":"<p>Sleep 1s</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-w/","title":"002 word w","text":"<p>Output img/01/002-word-w.gif</p> <p>Source config.tape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-w/#prep","title":"Prep","text":"<p>Type \"iLorem ipsum dolor-sit amet, consectetur_adipiscing elit.\" Escape Type \"0\"</p> <p>Show Sleep 1s</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-w/#recording","title":"Recording","text":"<p>Type@500ms \"w\" Type@500ms \"w\" Type@500ms \"w\" Type@500ms \"w\" Type@500ms \"w\" Type@500ms \"w\" Type@500ms \"w\" Type@500ms \"w\"</p> <p>Escape</p>"},{"location":"Weekly%20Tutorials/vhs/tapes/01/002-word-w/#end","title":"End","text":"<p>Sleep 1s</p>"}]}